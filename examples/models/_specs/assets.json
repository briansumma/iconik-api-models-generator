{
  "components": {
    "schemas": {
      "ApprovalBySchema": {
        "properties": {
          "change_date": {
            "format": "date-time",
            "type": "string"
          },
          "external": {
            "type": "string"
          },
          "object_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "APPROVED",
              "NOT_APPROVED",
              "MIXED"
            ],
            "type": "string"
          },
          "user": {
            "format": "uuid",
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApprovalJobSchema": {
        "properties": {
          "job_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApprovalSchema": {
        "properties": {
          "approvals_by": {
            "items": {
              "$ref": "#/components/schemas/ApprovalBySchema"
            },
            "nullable": true,
            "readOnly": true,
            "type": "array"
          },
          "change_date": {
            "format": "date-time",
            "type": "string"
          },
          "externals": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "groups": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "min_number": {
            "default": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "object_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "request_date": {
            "format": "date-time",
            "type": "string"
          },
          "requested_by": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "share_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "APPROVED",
              "NOT_APPROVED",
              "MIXED"
            ],
            "type": "string"
          },
          "user_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "APPROVED",
              "NOT_APPROVED",
              "MIXED"
            ],
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "users": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "users_info": {
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "readOnly": true,
            "type": "array"
          },
          "version_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApprovalsBySchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/ApprovalBySchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AssetBaseSchema": {
        "properties": {
          "analyze_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "category": {
            "nullable": true,
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "created_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_imported": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_viewed": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user_info": {
            "$ref": "#/components/schemas/User"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "external_link": {
            "format": "url",
            "nullable": true,
            "type": "string"
          },
          "face_recognition_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "favoured": {
            "readOnly": true,
            "type": "boolean"
          },
          "has_unconfirmed_persons": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_blocked": {
            "format": "bool",
            "type": "boolean"
          },
          "is_online": {
            "format": "bool",
            "type": "boolean"
          },
          "last_archive_restore_date": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "original_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_segment_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_version_id": {
            "format": "uuid",
            "type": "string"
          },
          "person_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "site_name": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "ASSET",
              "SEQUENCE",
              "NLE_PROJECT",
              "PLACEHOLDER",
              "CUSTOM",
              "LINK",
              "SUBCLIP"
            ],
            "type": "string"
          },
          "updated_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "updated_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "warning": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "AssetCreateSchema": {
        "properties": {
          "analyze_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "category": {
            "nullable": true,
            "type": "string"
          },
          "collection_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "created_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "type": "string"
          },
          "date_imported": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "date_viewed": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user_info": {
            "$ref": "#/components/schemas/User"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "external_link": {
            "format": "url",
            "nullable": true,
            "type": "string"
          },
          "face_recognition_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "favoured": {
            "readOnly": true,
            "type": "boolean"
          },
          "has_unconfirmed_persons": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_blocked": {
            "format": "bool",
            "type": "boolean"
          },
          "is_online": {
            "format": "bool",
            "type": "boolean"
          },
          "last_archive_restore_date": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "original_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_segment_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_version_id": {
            "format": "uuid",
            "type": "string"
          },
          "person_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "site_name": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "ASSET",
              "SEQUENCE",
              "NLE_PROJECT",
              "PLACEHOLDER",
              "CUSTOM",
              "LINK",
              "SUBCLIP"
            ],
            "type": "string"
          },
          "updated_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "updated_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "warning": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "AssetEditSchema": {
        "properties": {
          "analyze_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "category": {
            "nullable": true,
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "type": "string"
          },
          "created_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_imported": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_viewed": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "type": "string"
          },
          "deleted_by_user_info": {
            "$ref": "#/components/schemas/User"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "external_link": {
            "format": "url",
            "nullable": true,
            "type": "string"
          },
          "face_recognition_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "favoured": {
            "readOnly": true,
            "type": "boolean"
          },
          "has_unconfirmed_persons": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "is_blocked": {
            "format": "bool",
            "type": "boolean"
          },
          "is_online": {
            "format": "bool",
            "type": "boolean"
          },
          "last_archive_restore_date": {
            "format": "date-time",
            "type": "string"
          },
          "original_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_segment_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_version_id": {
            "format": "uuid",
            "type": "string"
          },
          "person_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "site_name": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "ASSET",
              "SEQUENCE",
              "NLE_PROJECT",
              "PLACEHOLDER",
              "CUSTOM",
              "LINK",
              "SUBCLIP"
            ],
            "type": "string"
          },
          "updated_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "updated_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "warning": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "AssetElasticSchema": {
        "properties": {
          "analyze_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "ancestor_collections": {
            "description": "Unordered list of all ancestor collection ids",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "category": {
            "nullable": true,
            "type": "string"
          },
          "comments_count": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "created_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_imported": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_viewed": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user_info": {
            "$ref": "#/components/schemas/User"
          },
          "duration_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "external_link": {
            "format": "url",
            "nullable": true,
            "type": "string"
          },
          "face_recognition_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "favoured": {
            "readOnly": true,
            "type": "boolean"
          },
          "files": {
            "items": {
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "has_unconfirmed_persons": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "in_collections": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "is_blocked": {
            "format": "bool",
            "type": "boolean"
          },
          "is_online": {
            "format": "bool",
            "type": "boolean"
          },
          "keyframes": {
            "items": {
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "last_archive_restore_date": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "media_type": {
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "readOnly": true,
            "type": "object"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "original_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_segment_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_version_id": {
            "format": "uuid",
            "type": "string"
          },
          "person_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "position": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "proxies": {
            "items": {
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "relations": {
            "items": {
              "$ref": "#/components/schemas/RelationElastic"
            },
            "readOnly": true,
            "type": "array"
          },
          "site_name": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "ASSET",
              "SEQUENCE",
              "NLE_PROJECT",
              "PLACEHOLDER",
              "CUSTOM",
              "LINK",
              "SUBCLIP"
            ],
            "type": "string"
          },
          "updated_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "updated_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "versions": {
            "items": {
              "$ref": "#/components/schemas/AssetVersion"
            },
            "readOnly": true,
            "type": "array"
          },
          "versions_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "warning": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "AssetHistoryBaseSchema": {
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "operation_description": {
            "nullable": true,
            "type": "string"
          },
          "operation_type": {
            "enum": [
              "EXPORT",
              "TRANSCODE",
              "ANALYZE",
              "ADD_FORMAT",
              "DELETE_FORMAT",
              "RESTORE_FORMAT",
              "DELETE_FILESET",
              "DELETE_FILE",
              "RESTORE_FILESET",
              "MODIFY_FILESET",
              "APPROVE",
              "REJECT",
              "DOWNLOAD",
              "METADATA",
              "CUSTOM",
              "TRANSCRIPTION",
              "VERSION_CREATE",
              "VERSION_DELETE",
              "VERSION_UPDATE",
              "VERSION_PROMOTE",
              "RESTORE",
              "RESTORE_FROM_GLACIER",
              "ARCHIVE",
              "RESTORE_ARCHIVE",
              "DELETE",
              "TRANSFER",
              "UNLINK_SUBCLIP",
              "FACE_RECOGNITION"
            ],
            "type": "string"
          },
          "share_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "share_user_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "operation_type"
        ],
        "type": "object"
      },
      "AssetHistoryBulkSchema": {
        "properties": {
          "asset_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "assets_jobs_map": {
            "type": "object"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "operation_description": {
            "nullable": true,
            "type": "string"
          },
          "operation_type": {
            "enum": [
              "EXPORT",
              "TRANSCODE",
              "ANALYZE",
              "ADD_FORMAT",
              "DELETE_FORMAT",
              "RESTORE_FORMAT",
              "DELETE_FILESET",
              "DELETE_FILE",
              "RESTORE_FILESET",
              "MODIFY_FILESET",
              "APPROVE",
              "REJECT",
              "DOWNLOAD",
              "METADATA",
              "CUSTOM",
              "TRANSCRIPTION",
              "VERSION_CREATE",
              "VERSION_DELETE",
              "VERSION_UPDATE",
              "VERSION_PROMOTE",
              "RESTORE",
              "RESTORE_FROM_GLACIER",
              "ARCHIVE",
              "RESTORE_ARCHIVE",
              "DELETE",
              "TRANSFER",
              "UNLINK_SUBCLIP",
              "FACE_RECOGNITION"
            ],
            "type": "string"
          },
          "share_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "share_user_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "asset_ids",
          "operation_type"
        ],
        "type": "object"
      },
      "AssetHistoryElasticSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "operation_description": {
            "nullable": true,
            "type": "string"
          },
          "operation_type": {
            "enum": [
              "EXPORT",
              "TRANSCODE",
              "ANALYZE",
              "ADD_FORMAT",
              "DELETE_FORMAT",
              "RESTORE_FORMAT",
              "DELETE_FILESET",
              "DELETE_FILE",
              "RESTORE_FILESET",
              "MODIFY_FILESET",
              "APPROVE",
              "REJECT",
              "DOWNLOAD",
              "METADATA",
              "CUSTOM",
              "TRANSCRIPTION",
              "VERSION_CREATE",
              "VERSION_DELETE",
              "VERSION_UPDATE",
              "VERSION_PROMOTE",
              "RESTORE",
              "RESTORE_FROM_GLACIER",
              "ARCHIVE",
              "RESTORE_ARCHIVE",
              "DELETE",
              "TRANSFER",
              "UNLINK_SUBCLIP",
              "FACE_RECOGNITION"
            ],
            "type": "string"
          },
          "share_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "share_user_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "operation_type"
        ],
        "type": "object"
      },
      "AssetHistoryEntitiesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/AssetHistoryElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AssetHistorySchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "operation_description": {
            "nullable": true,
            "type": "string"
          },
          "operation_type": {
            "enum": [
              "EXPORT",
              "TRANSCODE",
              "ANALYZE",
              "ADD_FORMAT",
              "DELETE_FORMAT",
              "RESTORE_FORMAT",
              "DELETE_FILESET",
              "DELETE_FILE",
              "RESTORE_FILESET",
              "MODIFY_FILESET",
              "APPROVE",
              "REJECT",
              "DOWNLOAD",
              "METADATA",
              "CUSTOM",
              "TRANSCRIPTION",
              "VERSION_CREATE",
              "VERSION_DELETE",
              "VERSION_UPDATE",
              "VERSION_PROMOTE",
              "RESTORE",
              "RESTORE_FROM_GLACIER",
              "ARCHIVE",
              "RESTORE_ARCHIVE",
              "DELETE",
              "TRANSFER",
              "UNLINK_SUBCLIP",
              "FACE_RECOGNITION"
            ],
            "type": "string"
          },
          "share_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "share_user_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "operation_type"
        ],
        "type": "object"
      },
      "AssetOrCollectionSchema": {
        "discriminator": {
          "mapping": {
            "assets": "#/components/schemas/AssetElasticSchema",
            "collections": "#/components/schemas/CollectionElastic"
          },
          "propertyName": "object_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AssetElasticSchema"
          },
          {
            "$ref": "#/components/schemas/CollectionElastic"
          }
        ]
      },
      "AssetSchema": {
        "properties": {
          "analyze_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "category": {
            "nullable": true,
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "created_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "type": "string"
          },
          "date_imported": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_viewed": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user_info": {
            "$ref": "#/components/schemas/User"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "external_link": {
            "format": "url",
            "nullable": true,
            "type": "string"
          },
          "face_recognition_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "favoured": {
            "readOnly": true,
            "type": "boolean"
          },
          "has_unconfirmed_persons": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "in_collections": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "is_blocked": {
            "format": "bool",
            "type": "boolean"
          },
          "is_online": {
            "format": "bool",
            "type": "boolean"
          },
          "last_archive_restore_date": {
            "format": "date-time",
            "type": "string"
          },
          "original_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_segment_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_version_id": {
            "format": "uuid",
            "type": "string"
          },
          "person_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "site_name": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "ASSET",
              "SEQUENCE",
              "NLE_PROJECT",
              "PLACEHOLDER",
              "CUSTOM",
              "LINK",
              "SUBCLIP"
            ],
            "type": "string"
          },
          "updated_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "updated_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "versions": {
            "items": {
              "$ref": "#/components/schemas/AssetVersion"
            },
            "readOnly": true,
            "type": "array"
          },
          "warning": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "AssetTranscriptionFromSubtitleSchema": {
        "properties": {
          "content": {
            "type": "string"
          },
          "delete_old_transcriptions": {
            "type": "boolean"
          },
          "format": {
            "enum": [
              "VTT",
              "WEBVTT",
              "SRT"
            ],
            "nullable": true,
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "source_subtitle_id": {
            "description": "Set to source subtitle_id or do not set and use the content fields instead",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssetTranscriptionPropertiesSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "speaker_labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssetTranscriptionsPropertiesSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/AssetTranscriptionPropertiesSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "AssetVersion": {
        "properties": {
          "analyze_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "type": "string"
          },
          "created_by_user_info": {
            "$ref": "#/components/schemas/User"
          },
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "face_recognition_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "has_unconfirmed_persons": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_online": {
            "type": "boolean"
          },
          "person_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "IN_PROGRESS",
              "FAILED",
              "DELETING",
              "DELETED"
            ],
            "type": "string"
          },
          "transcribe_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "transcribed_languages": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "version_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AssetVersionSchema": {
        "properties": {
          "analyze_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "type": "string"
          },
          "created_by_user_info": {
            "$ref": "#/components/schemas/User"
          },
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "face_recognition_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "has_unconfirmed_persons": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_online": {
            "type": "boolean"
          },
          "person_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "IN_PROGRESS",
              "FAILED",
              "DELETING",
              "DELETED"
            ],
            "type": "string"
          },
          "transcribe_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "transcribed_languages": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "version_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AssetVersionsSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "versions": {
            "items": {
              "$ref": "#/components/schemas/EditAssetVersion"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "asset_id"
        ],
        "type": "object"
      },
      "AssetsHistoryQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 10000,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssetsQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 10000,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "scroll": {
            "type": "boolean"
          },
          "scroll_id": {
            "format": "uuid",
            "type": "string"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssetsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/AssetElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BaseQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 10000,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BulkActionSchema": {
        "properties": {
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections",
              "saved_searches"
            ],
            "type": "string"
          }
        },
        "required": [
          "object_ids",
          "object_type"
        ],
        "type": "object"
      },
      "BulkAddToFavoritesSchema": {
        "properties": {
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections"
            ],
            "type": "string"
          }
        },
        "required": [
          "object_ids",
          "object_type"
        ],
        "type": "object"
      },
      "BulkAssetEditSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/AssetEditSchema"
            },
            "type": "array"
          }
        },
        "required": [
          "objects"
        ],
        "type": "object"
      },
      "BulkAssetVersionEditSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/AssetVersionsSchema"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "objects"
        ],
        "type": "object"
      },
      "BulkCollectionACLsUpdateSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "collection_ids",
          "include_assets",
          "include_collections",
          "job_id"
        ],
        "type": "object"
      },
      "BulkCollectionActionSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "collection_ids",
          "include_assets",
          "include_collections",
          "job_id"
        ],
        "type": "object"
      },
      "BulkCollectionAnalyzeSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "collection_ids",
          "include_assets",
          "include_collections",
          "job_id"
        ],
        "type": "object"
      },
      "BulkCollectionDeleteSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "collection_ids",
          "job_id",
          "storage_id"
        ],
        "type": "object"
      },
      "BulkCollectionFaceExtractionSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "collection_ids",
          "include_assets",
          "include_collections",
          "job_id"
        ],
        "type": "object"
      },
      "BulkCollectionMetadataUpdateSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "collection_ids",
          "include_assets",
          "include_collections",
          "job_id"
        ],
        "type": "object"
      },
      "BulkCollectionTranscodeSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "collection_ids",
          "include_assets",
          "include_collections",
          "job_id"
        ],
        "type": "object"
      },
      "BulkCollectionTranscribeSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "collection_ids",
          "include_assets",
          "include_collections",
          "job_id"
        ],
        "type": "object"
      },
      "BulkCollectionTransferSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "keep_collection_structure": {
            "type": "boolean"
          },
          "keep_parent_collection_structure": {
            "type": "boolean"
          }
        },
        "required": [
          "collection_ids",
          "include_assets",
          "include_collections",
          "job_id"
        ],
        "type": "object"
      },
      "BulkCreateSegmentsSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/Segment"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "objects"
        ],
        "type": "object"
      },
      "BulkDeleteFromFavoritesSchema": {
        "properties": {
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections"
            ],
            "type": "string"
          }
        },
        "required": [
          "object_ids",
          "object_type"
        ],
        "type": "object"
      },
      "BulkDeleteSchema": {
        "properties": {
          "content_only": {
            "default": true,
            "description": "If set to `False`, will also delete entities of type `object_type` specified in `object_ids`.",
            "type": "boolean",
            "writeOnly": true
          },
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections",
              "saved_searches"
            ],
            "type": "string"
          }
        },
        "required": [
          "object_ids",
          "object_type"
        ],
        "type": "object"
      },
      "BulkEditAssetSegmentsSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/EditAssetSegment"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "objects"
        ],
        "type": "object"
      },
      "BulkEditSegmentsSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/EditSegmentForBulk"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "objects"
        ],
        "type": "object"
      },
      "BulkRemoveApprovalSchema": {
        "properties": {
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections",
              "saved_searches"
            ],
            "type": "string"
          }
        },
        "required": [
          "object_ids",
          "object_type"
        ],
        "type": "object"
      },
      "BulkSetApprovalSchema": {
        "properties": {
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections",
              "saved_searches"
            ],
            "type": "string"
          },
          "status": {
            "enum": [
              "APPROVED",
              "NOT_APPROVED"
            ],
            "type": "string"
          }
        },
        "required": [
          "object_ids",
          "object_type",
          "status"
        ],
        "type": "object"
      },
      "BulkShareCreateSchema": {
        "properties": {
          "allow_approving_comments": {
            "type": "boolean"
          },
          "allow_comments": {
            "type": "boolean"
          },
          "allow_custom_actions": {
            "type": "boolean"
          },
          "allow_download": {
            "type": "boolean"
          },
          "allow_download_proxy": {
            "type": "boolean"
          },
          "allow_setting_approve_status": {
            "type": "boolean"
          },
          "allow_upload": {
            "type": "boolean"
          },
          "allow_user_search_for_mentions": {
            "type": "boolean"
          },
          "allow_view_transcriptions": {
            "type": "boolean"
          },
          "allow_view_versions": {
            "type": "boolean"
          },
          "emails": {
            "items": {
              "format": "email",
              "type": "string"
            },
            "type": "array"
          },
          "expires": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "is_approval": {
            "nullable": true,
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "metadata_views": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets"
            ],
            "readOnly": true,
            "type": "string"
          },
          "owner_id": {
            "readOnly": true,
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "share_by_url": {
            "type": "boolean"
          },
          "show_watermark": {
            "nullable": true,
            "type": "boolean"
          },
          "system_domain_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "upload_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "allow_approving_comments",
          "allow_comments",
          "allow_download",
          "allow_setting_approve_status",
          "object_ids",
          "title"
        ],
        "type": "object"
      },
      "BulkShareDeleteSchema": {
        "properties": {
          "share_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "share_ids"
        ],
        "type": "object"
      },
      "CollectionBaseSchema": {
        "properties": {
          "category": {
            "nullable": true,
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_order_status": {
            "enum": [
              "DISABLED",
              "ENABLING",
              "ENABLED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "favoured": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "in_collections": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "is_root": {
            "type": "boolean"
          },
          "keyframe_asset_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "keyframes": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "metadata": {
            "readOnly": true,
            "type": "object"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parents": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "position": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "project_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "HIDDEN",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "CollectionContentInfoSchema": {
        "properties": {
          "assets_count": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          },
          "collections_count": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          },
          "storage_info": {
            "items": {
              "$ref": "#/components/schemas/StorageContentInfo"
            },
            "readOnly": true,
            "type": "array"
          },
          "title": {
            "readOnly": true,
            "type": "string"
          },
          "total_duration_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          },
          "total_size": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CollectionContentOrderingSchema": {
        "properties": {
          "after_object_id": {
            "format": "uuid",
            "type": "string"
          },
          "before_object_id": {
            "format": "uuid",
            "type": "string"
          },
          "position": {
            "description": "Position the member will be moved to. To insert athe the end send -1",
            "format": "int32",
            "minimum": -1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CollectionContentQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 10000,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CollectionContentSchema": {
        "properties": {
          "collection_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "object_id": {
            "format": "uuid",
            "type": "string"
          },
          "object_type": {
            "type": "string"
          }
        },
        "required": [
          "object_id",
          "object_type"
        ],
        "type": "object"
      },
      "CollectionElastic": {
        "properties": {
          "category": {
            "nullable": true,
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_order_status": {
            "enum": [
              "DISABLED",
              "ENABLING",
              "ENABLED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "favoured": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "in_collections": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "is_root": {
            "type": "boolean"
          },
          "keyframe_asset_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "keyframes": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "metadata": {
            "readOnly": true,
            "type": "object"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parents": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "position": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "project_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "HIDDEN",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "CollectionElasticSchema": {
        "properties": {
          "category": {
            "nullable": true,
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_order_status": {
            "enum": [
              "DISABLED",
              "ENABLING",
              "ENABLED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "favoured": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "in_collections": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "is_root": {
            "type": "boolean"
          },
          "keyframe_asset_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "keyframes": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "metadata": {
            "readOnly": true,
            "type": "object"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parents": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "position": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "project_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "HIDDEN",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "CollectionInputSchema": {
        "properties": {
          "category": {
            "nullable": true,
            "type": "string"
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "is_root": {
            "type": "boolean"
          },
          "keyframe_asset_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "HIDDEN",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "CollectionSchema": {
        "properties": {
          "category": {
            "nullable": true,
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_order_status": {
            "enum": [
              "DISABLED",
              "ENABLING",
              "ENABLED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "favoured": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "in_collections": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "is_root": {
            "type": "boolean"
          },
          "keyframe_asset_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "keyframes": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "metadata": {
            "readOnly": true,
            "type": "object"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parents": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "position": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "project_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "HIDDEN",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "CollectionSizeSchema": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CollectionsQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 10000,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "scroll": {
            "type": "boolean"
          },
          "scroll_id": {
            "format": "uuid",
            "type": "string"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CollectionsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/CollectionElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CreateAssetVersionFromAssetSchema": {
        "properties": {
          "copy_previous_version_persons": {
            "type": "boolean"
          },
          "copy_previous_version_segments": {
            "type": "boolean"
          },
          "include_segment_types": {
            "items": {
              "enum": [
                "MARKER",
                "QC",
                "GENERIC",
                "COMMENT",
                "TAG",
                "TRANSCRIPTION",
                "SCENE",
                "PERSON"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "source_metadata_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateAssetVersionFromVersionSchema": {
        "properties": {
          "copy_previous_version_persons": {
            "type": "boolean"
          },
          "copy_previous_version_segments": {
            "type": "boolean"
          },
          "exclude_format_ids": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "include_segment_types": {
            "items": {
              "enum": [
                "MARKER",
                "QC",
                "GENERIC",
                "COMMENT",
                "TAG",
                "TRANSCRIPTION",
                "SCENE",
                "PERSON"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "source_metadata_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateAssetVersionSchema": {
        "properties": {
          "copy_metadata": {
            "type": "boolean"
          },
          "copy_persons": {
            "type": "boolean"
          },
          "copy_segments": {
            "type": "boolean"
          },
          "include_segment_types": {
            "items": {
              "enum": [
                "MARKER",
                "QC",
                "GENERIC",
                "COMMENT",
                "TAG",
                "TRANSCRIPTION",
                "SCENE",
                "PERSON"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "source_version_id": {
            "format": "uuid",
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateCollectionContentOrderingSchema": {
        "properties": {
          "custom_order_sort": {
            "description": "Initial sort order for an ordered collection. Specified as a comma separated list of fieldnames with direction. For example - date_created,asc;status,desc",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateCollectionFromSavedSearchResponseSchema": {
        "properties": {
          "collection_title": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateCollectionFromSavedSearchSchema": {
        "properties": {
          "collection_id": {
            "format": "uuid",
            "type": "string"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "saved_search_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "collection_id",
          "job_id",
          "saved_search_id"
        ],
        "type": "object"
      },
      "CustomActionCallbackReplySchema": {
        "properties": {
          "redirect_url": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomActionCallbackSchema": {
        "properties": {
          "asset_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "metadata_values": {
            "additionalProperties": {
              "$ref": "#/components/schemas/MetadataFieldValueSchema"
            },
            "type": "object"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "saved_search_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CustomActionSchema": {
        "properties": {
          "app_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "context": {
            "enum": [
              "ASSET",
              "ASSET_SUBCLIP",
              "SHARED_ASSET",
              "COLLECTION",
              "SHARED_COLLECTION",
              "BULK",
              "SAVED_SEARCH",
              "NONE"
            ],
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "last_error": {
            "readOnly": true,
            "type": "string"
          },
          "last_error_date": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metadata_view": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "FAILING",
              "HEALTHY"
            ],
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "OPEN",
              "POST"
            ],
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "context",
          "title",
          "url"
        ],
        "type": "object"
      },
      "CustomActionsSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/CustomActionSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeleteQueueAssetsQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 10000,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteQueueCollectionsQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 10000,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteQueueSchema": {
        "properties": {
          "ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "ids"
        ],
        "type": "object"
      },
      "DeleteSegmentsSchema": {
        "properties": {
          "segment_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "segment_type": {
            "enum": [
              "MARKER",
              "QC",
              "GENERIC",
              "COMMENT",
              "TAG",
              "TRANSCRIPTION",
              "SCENE",
              "PERSON"
            ],
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Drawing": {
        "properties": {
          "primitives": {
            "items": {
              "$ref": "#/components/schemas/DrawingPrimitive"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DrawingPoint": {
        "properties": {
          "x": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "y": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "required": [
          "x",
          "y"
        ],
        "type": "object"
      },
      "DrawingPointSchema": {
        "properties": {
          "x": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "y": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "required": [
          "x",
          "y"
        ],
        "type": "object"
      },
      "DrawingPrimitive": {
        "properties": {
          "color": {
            "type": "string"
          },
          "opacity": {
            "type": "number"
          },
          "points": {
            "items": {
              "$ref": "#/components/schemas/DrawingPoint"
            },
            "type": "array"
          },
          "text": {
            "type": "string"
          },
          "type": {
            "enum": [
              "LINE",
              "RECTANGLE",
              "ARROW",
              "ELLIPSE",
              "PENCIL",
              "TEXT"
            ],
            "type": "string"
          },
          "width": {
            "type": "number"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "DrawingPrimitiveSchema": {
        "properties": {
          "color": {
            "type": "string"
          },
          "opacity": {
            "type": "number"
          },
          "points": {
            "items": {
              "$ref": "#/components/schemas/DrawingPointSchema"
            },
            "type": "array"
          },
          "text": {
            "type": "string"
          },
          "type": {
            "enum": [
              "LINE",
              "RECTANGLE",
              "ARROW",
              "ELLIPSE",
              "PENCIL",
              "TEXT"
            ],
            "type": "string"
          },
          "width": {
            "type": "number"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "DrawingSchema": {
        "properties": {
          "primitives": {
            "items": {
              "$ref": "#/components/schemas/DrawingPrimitiveSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EditAssetSegment": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "drawing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Drawing"
              }
            ],
            "nullable": true
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "face_bounding_boxes": {
            "items": {
              "$ref": "#/components/schemas/FaceBoundingBox"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "keyframe_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "path": {
            "readOnly": true,
            "type": "string"
          },
          "person_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "project_id": {
            "description": "ID of a project if the segment is created from a project",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "segment_checked": {
            "type": "boolean"
          },
          "segment_color": {
            "type": "string"
          },
          "segment_text": {
            "nullable": true,
            "type": "string"
          },
          "segment_track": {
            "nullable": true,
            "type": "string"
          },
          "segment_type": {
            "enum": [
              "MARKER",
              "QC",
              "GENERIC",
              "COMMENT",
              "TAG",
              "TRANSCRIPTION",
              "SCENE",
              "PERSON"
            ],
            "type": "string"
          },
          "share_id": {
            "description": "ID of a share if the segment is created from a share",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "share_user_email": {
            "format": "email",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "subclip_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "top_level": {
            "readOnly": true,
            "type": "boolean"
          },
          "transcription": {
            "$ref": "#/components/schemas/TranscriptionType"
          },
          "transcription_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "user_first_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "user_info": {
            "$ref": "#/components/schemas/User"
          },
          "user_last_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_photo": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "segment_type"
        ],
        "type": "object"
      },
      "EditAssetSegmentSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "drawing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DrawingSchema"
              }
            ],
            "nullable": true
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "face_bounding_boxes": {
            "items": {
              "$ref": "#/components/schemas/FaceBoundingBox"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "keyframe_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "path": {
            "readOnly": true,
            "type": "string"
          },
          "person_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "project_id": {
            "description": "ID of a project if the segment is created from a project",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "segment_checked": {
            "type": "boolean"
          },
          "segment_color": {
            "type": "string"
          },
          "segment_text": {
            "nullable": true,
            "type": "string"
          },
          "segment_track": {
            "nullable": true,
            "type": "string"
          },
          "segment_type": {
            "enum": [
              "MARKER",
              "QC",
              "GENERIC",
              "COMMENT",
              "TAG",
              "TRANSCRIPTION",
              "SCENE",
              "PERSON"
            ],
            "type": "string"
          },
          "share_id": {
            "description": "ID of a share if the segment is created from a share",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "share_user_email": {
            "format": "email",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "subclip_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "top_level": {
            "readOnly": true,
            "type": "boolean"
          },
          "transcription": {
            "$ref": "#/components/schemas/TranscriptionType"
          },
          "transcription_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "user_first_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "user_info": {
            "$ref": "#/components/schemas/User"
          },
          "user_last_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_photo": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "segment_type"
        ],
        "type": "object"
      },
      "EditAssetVersion": {
        "properties": {
          "analyze_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "type": "string"
          },
          "created_by_user_info": {
            "$ref": "#/components/schemas/User"
          },
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "face_recognition_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "has_unconfirmed_persons": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "is_online": {
            "type": "boolean"
          },
          "person_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "IN_PROGRESS",
              "FAILED",
              "DELETING",
              "DELETED"
            ],
            "type": "string"
          },
          "transcribe_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "transcribed_languages": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "version_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "EditAssetVersionSchema": {
        "properties": {
          "analyze_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "type": "string"
          },
          "created_by_user_info": {
            "$ref": "#/components/schemas/User"
          },
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "face_recognition_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "has_unconfirmed_persons": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "is_online": {
            "type": "boolean"
          },
          "person_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "IN_PROGRESS",
              "FAILED",
              "DELETING",
              "DELETED"
            ],
            "type": "string"
          },
          "transcribe_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "transcribed_languages": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "version_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "EditPersonStatusSchema": {
        "properties": {
          "status": {
            "enum": [
              "NEW",
              "UNCONFIRMED",
              "SYSTEM_CONFIRMED",
              "USER_CONFIRMED"
            ],
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "EditSegmentForBulk": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "drawing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Drawing"
              }
            ],
            "nullable": true
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "face_bounding_boxes": {
            "items": {
              "$ref": "#/components/schemas/FaceBoundingBox"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "keyframe_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "person_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "project_id": {
            "description": "ID of a project if the segment is created from a project",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "segment_checked": {
            "type": "boolean"
          },
          "segment_color": {
            "type": "string"
          },
          "segment_text": {
            "nullable": true,
            "type": "string"
          },
          "segment_track": {
            "nullable": true,
            "type": "string"
          },
          "segment_type": {
            "enum": [
              "MARKER",
              "QC",
              "GENERIC",
              "COMMENT",
              "TAG",
              "TRANSCRIPTION",
              "SCENE",
              "PERSON"
            ],
            "type": "string"
          },
          "share_id": {
            "description": "ID of a share if the segment is created from a share",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "share_user_email": {
            "format": "email",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "subclip_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "top_level": {
            "type": "boolean"
          },
          "transcription": {
            "$ref": "#/components/schemas/TranscriptionType"
          },
          "transcription_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "user_first_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "type": "string"
          },
          "user_info": {
            "$ref": "#/components/schemas/User"
          },
          "user_last_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_photo": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "asset_id",
          "id",
          "segment_type"
        ],
        "type": "object"
      },
      "EditSegmentForBulkSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "drawing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DrawingSchema"
              }
            ],
            "nullable": true
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "face_bounding_boxes": {
            "items": {
              "$ref": "#/components/schemas/FaceBoundingBox"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "keyframe_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "person_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "project_id": {
            "description": "ID of a project if the segment is created from a project",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "segment_checked": {
            "type": "boolean"
          },
          "segment_color": {
            "type": "string"
          },
          "segment_text": {
            "nullable": true,
            "type": "string"
          },
          "segment_track": {
            "nullable": true,
            "type": "string"
          },
          "segment_type": {
            "enum": [
              "MARKER",
              "QC",
              "GENERIC",
              "COMMENT",
              "TAG",
              "TRANSCRIPTION",
              "SCENE",
              "PERSON"
            ],
            "type": "string"
          },
          "share_id": {
            "description": "ID of a share if the segment is created from a share",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "share_user_email": {
            "format": "email",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "subclip_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "top_level": {
            "type": "boolean"
          },
          "transcription": {
            "$ref": "#/components/schemas/TranscriptionType"
          },
          "transcription_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "user_first_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "type": "string"
          },
          "user_info": {
            "$ref": "#/components/schemas/User"
          },
          "user_last_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_photo": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "asset_id",
          "id",
          "segment_type"
        ],
        "type": "object"
      },
      "EditSegmentSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "drawing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DrawingSchema"
              }
            ],
            "nullable": true
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "face_bounding_boxes": {
            "items": {
              "$ref": "#/components/schemas/FaceBoundingBox"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "keyframe_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "path": {
            "readOnly": true,
            "type": "string"
          },
          "person_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "project_id": {
            "description": "ID of a project if the segment is created from a project",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "segment_checked": {
            "type": "boolean"
          },
          "segment_color": {
            "type": "string"
          },
          "segment_text": {
            "nullable": true,
            "type": "string"
          },
          "segment_track": {
            "nullable": true,
            "type": "string"
          },
          "segment_type": {
            "enum": [
              "MARKER",
              "QC",
              "GENERIC",
              "COMMENT",
              "TAG",
              "TRANSCRIPTION",
              "SCENE",
              "PERSON"
            ],
            "type": "string"
          },
          "share_id": {
            "description": "ID of a share if the segment is created from a share",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "share_user_email": {
            "format": "email",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "subclip_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "top_level": {
            "readOnly": true,
            "type": "boolean"
          },
          "transcription": {
            "$ref": "#/components/schemas/TranscriptionType"
          },
          "transcription_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "user_first_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "user_info": {
            "$ref": "#/components/schemas/User"
          },
          "user_last_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_photo": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "segment_type"
        ],
        "type": "object"
      },
      "FaceBoundingBox": {
        "properties": {
          "bounding_box": {
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "face_id": {
            "format": "uuid",
            "type": "string"
          },
          "timestamp_ms": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "required": [
          "face_id"
        ],
        "type": "object"
      },
      "FaceBoundingBoxSchema": {
        "properties": {
          "bounding_box": {
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "face_id": {
            "format": "uuid",
            "type": "string"
          },
          "timestamp_ms": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          }
        },
        "required": [
          "face_id"
        ],
        "type": "object"
      },
      "FavoritesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssetOrCollectionSchema"
              }
            ],
            "readOnly": true
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GetAssetsLatestVersionSchema": {
        "properties": {
          "include_in_progress": {
            "default": false,
            "type": "boolean"
          },
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "default": "assets",
            "enum": [
              "assets"
            ],
            "type": "string"
          }
        },
        "required": [
          "object_ids"
        ],
        "type": "object"
      },
      "GetShareSchema": {
        "properties": {
          "allow_approving_comments": {
            "type": "boolean"
          },
          "allow_comments": {
            "type": "boolean"
          },
          "allow_custom_actions": {
            "type": "boolean"
          },
          "allow_download": {
            "type": "boolean"
          },
          "allow_download_proxy": {
            "type": "boolean"
          },
          "allow_setting_approve_status": {
            "type": "boolean"
          },
          "allow_upload": {
            "type": "boolean"
          },
          "allow_user_search_for_mentions": {
            "type": "boolean"
          },
          "allow_view_transcriptions": {
            "type": "boolean"
          },
          "allow_view_versions": {
            "type": "boolean"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "expires": {
            "format": "date-time",
            "type": "string"
          },
          "has_password": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "is_approval": {
            "nullable": true,
            "type": "boolean"
          },
          "message": {
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "metadata_views": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "object_id": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "owner_id": {
            "readOnly": true,
            "type": "string"
          },
          "project_id": {
            "description": "Project ID if the share is created from a project",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "show_watermark": {
            "nullable": true,
            "type": "boolean"
          },
          "system_domain_id": {
            "readOnly": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "upload_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "upload_storage_presign_md5_checksum": {
            "readOnly": true,
            "type": "boolean"
          },
          "url": {
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/ShareUser"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "required": [
          "allow_approving_comments",
          "allow_comments",
          "allow_download",
          "allow_setting_approve_status"
        ],
        "type": "object"
      },
      "ListObjectsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MetadataFieldValueSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "field_values": {
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Playlist": {
        "properties": {
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "item_count": {
            "readOnly": true,
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "project_id": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "HIDDEN"
            ],
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "PlaylistBaseSchema": {
        "properties": {
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "project_id": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "HIDDEN"
            ],
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "PlaylistCreateSchema": {
        "properties": {
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "playlist_items": {
            "items": {
              "$ref": "#/components/schemas/PlaylistItem"
            },
            "type": "array"
          },
          "project_id": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "HIDDEN"
            ],
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "PlaylistItem": {
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "object_id": {
            "format": "uuid",
            "type": "string"
          },
          "object_type": {
            "enum": [
              "assets",
              "sequences"
            ],
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "version_id": {
            "type": "string"
          }
        },
        "required": [
          "object_id",
          "object_type"
        ],
        "type": "object"
      },
      "PlaylistItemElasticSchema": {
        "properties": {
          "analyze_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "ancestor_collections": {
            "description": "Unordered list of all ancestor collection ids",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "category": {
            "nullable": true,
            "type": "string"
          },
          "comments_count": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "created_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_imported": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_viewed": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user_info": {
            "$ref": "#/components/schemas/User"
          },
          "duration_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "external_link": {
            "format": "url",
            "nullable": true,
            "type": "string"
          },
          "face_recognition_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "favoured": {
            "readOnly": true,
            "type": "boolean"
          },
          "files": {
            "items": {
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "has_unconfirmed_persons": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "in_collections": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "is_blocked": {
            "format": "bool",
            "type": "boolean"
          },
          "is_online": {
            "format": "bool",
            "type": "boolean"
          },
          "keyframes": {
            "items": {
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "last_archive_restore_date": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "media_type": {
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "readOnly": true,
            "type": "object"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "original_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_segment_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_version_id": {
            "format": "uuid",
            "type": "string"
          },
          "person_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "position": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "proxies": {
            "items": {
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "relations": {
            "items": {
              "$ref": "#/components/schemas/RelationElastic"
            },
            "readOnly": true,
            "type": "array"
          },
          "site_name": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "ASSET",
              "SEQUENCE",
              "NLE_PROJECT",
              "PLACEHOLDER",
              "CUSTOM",
              "LINK",
              "SUBCLIP"
            ],
            "type": "string"
          },
          "updated_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "updated_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "versions": {
            "items": {
              "$ref": "#/components/schemas/AssetVersionSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "versions_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "warning": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "PlaylistItemSchema": {
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "object_id": {
            "format": "uuid",
            "type": "string"
          },
          "object_type": {
            "enum": [
              "assets",
              "sequences"
            ],
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "version_id": {
            "type": "string"
          }
        },
        "required": [
          "object_id",
          "object_type"
        ],
        "type": "object"
      },
      "PlaylistItemUpdatePositionSchema": {
        "properties": {
          "position": {
            "description": "New position of the item in the playlist.If not provided, the item will be appended to the end of the playlist",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PlaylistItemsQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 10000,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlaylistItemsSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/PlaylistItemElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "PlaylistSchema": {
        "properties": {
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "item_count": {
            "readOnly": true,
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "playlist_items": {
            "items": {
              "$ref": "#/components/schemas/PlaylistItemSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "project_id": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "HIDDEN"
            ],
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "PlaylistsQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 10000,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlaylistsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/Playlist"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ProjectBaseSchema": {
        "properties": {
          "collection_id": {
            "format": "uuid",
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "collection_id",
          "name"
        ],
        "type": "object"
      },
      "ProjectCreateSchema": {
        "properties": {
          "collection_id": {
            "description": "ID of a collection that will become a project collection",
            "format": "uuid",
            "type": "string"
          },
          "collection_parent_id": {
            "description": "ID of a collection that the project should be a child of",
            "format": "uuid",
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ProjectMemberBaseSchema": {
        "properties": {
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "project_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProjectMemberCreateSchema": {
        "properties": {
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "User ID in iconik",
            "format": "uuid",
            "type": "string"
          },
          "project_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "ProjectMemberSchema": {
        "properties": {
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "User ID in iconik",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "project_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProjectMembersQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 10000,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProjectMembersSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/ProjectMemberSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProjectSchema": {
        "properties": {
          "collection_id": {
            "format": "uuid",
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "collection_id",
          "name"
        ],
        "type": "object"
      },
      "ProjectsQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 10000,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "scroll": {
            "type": "boolean"
          },
          "scroll_id": {
            "format": "uuid",
            "type": "string"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProjectsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/ProjectSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ReindexAllAssetsSchema": {
        "properties": {
          "asset_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "realms": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexAllCollectionsSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "realms": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": [
          "collection_ids"
        ],
        "type": "object"
      },
      "ReindexAllSegmentsSchema": {
        "properties": {
          "asset_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "ignore_comments": {
            "type": "boolean"
          },
          "realms": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "required": [
          "asset_ids"
        ],
        "type": "object"
      },
      "ReindexAssetHistorySchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexAssetSchema": {
        "properties": {
          "realms": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexBulkActionSchema": {
        "properties": {
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections",
              "saved_searches"
            ],
            "type": "string"
          },
          "realms": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "required": [
          "object_ids",
          "object_type"
        ],
        "type": "object"
      },
      "ReindexCollectionContentSchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexCollectionSchema": {
        "properties": {
          "realms": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexInheritedCollectionsACLSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "content": {
            "default": true,
            "type": "boolean"
          },
          "recursive": {
            "default": true,
            "type": "boolean"
          }
        },
        "required": [
          "collection_ids"
        ],
        "type": "object"
      },
      "ReindexPlaylistSchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexProjectSchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexSegmentSchema": {
        "properties": {
          "ignore_comments": {
            "type": "boolean"
          },
          "realms": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexSegmentsSchema": {
        "properties": {
          "ignore_comments": {
            "type": "boolean"
          },
          "realms": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "segment_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "required": [
          "segment_ids"
        ],
        "type": "object"
      },
      "ReindexSequenceSchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexShareSchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RelationElastic": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "related_from_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "related_to_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "relation_type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RelationElasticSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "related_from_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "related_to_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "relation_type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RelationSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "related_to_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "relation_type": {
            "type": "string"
          }
        },
        "required": [
          "related_to_asset_id",
          "relation_type"
        ],
        "type": "object"
      },
      "RelationTypeSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "destination_label": {
            "type": "string"
          },
          "is_directional": {
            "type": "boolean"
          },
          "is_system": {
            "readOnly": true,
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "source_label": {
            "type": "string"
          }
        },
        "required": [
          "destination_label",
          "name",
          "source_label"
        ],
        "type": "object"
      },
      "RelationTypesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/RelationTypeSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RelationsQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 10000,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RelationsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/RelationSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SchedulePersonActionSchema": {
        "properties": {
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "new_person_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "queue_name": {
            "type": "string"
          }
        },
        "required": [
          "job_id",
          "queue_name"
        ],
        "type": "object"
      },
      "Segment": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "drawing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Drawing"
              }
            ],
            "nullable": true
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "face_bounding_boxes": {
            "items": {
              "$ref": "#/components/schemas/FaceBoundingBox"
            },
            "nullable": true,
            "type": "array"
          },
          "has_drawing": {
            "readOnly": true
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "keyframe_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "person_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "project_id": {
            "description": "ID of a project if the segment is created from a project",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "segment_checked": {
            "type": "boolean"
          },
          "segment_color": {
            "type": "string"
          },
          "segment_text": {
            "nullable": true,
            "type": "string"
          },
          "segment_track": {
            "nullable": true,
            "type": "string"
          },
          "segment_type": {
            "enum": [
              "MARKER",
              "QC",
              "GENERIC",
              "COMMENT",
              "TAG",
              "TRANSCRIPTION",
              "SCENE",
              "PERSON"
            ],
            "type": "string"
          },
          "share_id": {
            "description": "ID of a share if the segment is created from a share",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "share_user_email": {
            "format": "email",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "subclip_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "top_level": {
            "type": "boolean"
          },
          "transcription": {
            "$ref": "#/components/schemas/TranscriptionType"
          },
          "transcription_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "user_first_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "type": "string"
          },
          "user_info": {
            "$ref": "#/components/schemas/User"
          },
          "user_last_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_photo": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "segment_type"
        ],
        "type": "object"
      },
      "SegmentBaseSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "drawing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DrawingSchema"
              }
            ],
            "nullable": true
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "face_bounding_boxes": {
            "items": {
              "$ref": "#/components/schemas/FaceBoundingBoxSchema"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "keyframe_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "person_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "project_id": {
            "description": "ID of a project if the segment is created from a project",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "segment_checked": {
            "type": "boolean"
          },
          "segment_color": {
            "type": "string"
          },
          "segment_text": {
            "nullable": true,
            "type": "string"
          },
          "segment_track": {
            "nullable": true,
            "type": "string"
          },
          "segment_type": {
            "enum": [
              "MARKER",
              "QC",
              "GENERIC",
              "COMMENT",
              "TAG",
              "TRANSCRIPTION",
              "SCENE",
              "PERSON"
            ],
            "type": "string"
          },
          "share_id": {
            "description": "ID of a share if the segment is created from a share",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "share_user_email": {
            "format": "email",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "subclip_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "top_level": {
            "type": "boolean"
          },
          "transcription": {
            "$ref": "#/components/schemas/TranscriptionType"
          },
          "transcription_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "user_first_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "type": "string"
          },
          "user_info": {
            "$ref": "#/components/schemas/User"
          },
          "user_last_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_photo": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "segment_type"
        ],
        "type": "object"
      },
      "SegmentElasticSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "drawing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DrawingSchema"
              }
            ],
            "nullable": true
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "face_bounding_boxes": {
            "items": {
              "$ref": "#/components/schemas/FaceBoundingBoxSchema"
            },
            "nullable": true,
            "type": "array"
          },
          "has_drawing": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "keyframe_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "person_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "project_id": {
            "description": "ID of a project if the segment is created from a project",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "segment_checked": {
            "type": "boolean"
          },
          "segment_color": {
            "type": "string"
          },
          "segment_text": {
            "nullable": true,
            "type": "string"
          },
          "segment_track": {
            "nullable": true,
            "type": "string"
          },
          "segment_type": {
            "enum": [
              "MARKER",
              "QC",
              "GENERIC",
              "COMMENT",
              "TAG",
              "TRANSCRIPTION",
              "SCENE",
              "PERSON"
            ],
            "type": "string"
          },
          "share_id": {
            "description": "ID of a share if the segment is created from a share",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "share_user_email": {
            "format": "email",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "subclip_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "top_level": {
            "type": "boolean"
          },
          "transcription": {
            "$ref": "#/components/schemas/TranscriptionType"
          },
          "transcription_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "user_first_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "type": "string"
          },
          "user_info": {
            "$ref": "#/components/schemas/User"
          },
          "user_last_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_photo": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "segment_type"
        ],
        "type": "object"
      },
      "SegmentQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 10000,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "scroll": {
            "type": "boolean"
          },
          "scroll_id": {
            "format": "uuid",
            "type": "string"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SegmentSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "drawing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DrawingSchema"
              }
            ],
            "nullable": true
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "face_bounding_boxes": {
            "items": {
              "$ref": "#/components/schemas/FaceBoundingBoxSchema"
            },
            "nullable": true,
            "type": "array"
          },
          "has_drawing": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "keyframe_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "person_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "project_id": {
            "description": "ID of a project if the segment is created from a project",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "segment_checked": {
            "type": "boolean"
          },
          "segment_color": {
            "type": "string"
          },
          "segment_text": {
            "nullable": true,
            "type": "string"
          },
          "segment_track": {
            "nullable": true,
            "type": "string"
          },
          "segment_type": {
            "enum": [
              "MARKER",
              "QC",
              "GENERIC",
              "COMMENT",
              "TAG",
              "TRANSCRIPTION",
              "SCENE",
              "PERSON"
            ],
            "type": "string"
          },
          "share_id": {
            "description": "ID of a share if the segment is created from a share",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "share_user_email": {
            "format": "email",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "subclip_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "nullable": true,
            "type": "integer"
          },
          "top_level": {
            "type": "boolean"
          },
          "transcription": {
            "$ref": "#/components/schemas/TranscriptionType"
          },
          "transcription_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "user_first_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "type": "string"
          },
          "user_info": {
            "$ref": "#/components/schemas/User"
          },
          "user_last_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_photo": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "segment_type"
        ],
        "type": "object"
      },
      "SegmentsSchema": {
        "properties": {
          "facets": {
            "type": "object"
          },
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/SegmentElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SequenceBaseSchema": {
        "properties": {
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "SequenceCreateSchema": {
        "properties": {
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "SequenceItemSchema": {
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "object_id": {
            "format": "uuid",
            "type": "string"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections"
            ],
            "type": "string"
          },
          "position": {
            "description": "Position of the item in the sequence.If not provided, the item will be appended to the end of the sequence",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "object_id",
          "object_type"
        ],
        "type": "object"
      },
      "SequenceItemUpdatePositionSchema": {
        "properties": {
          "position": {
            "description": "New position of the item in the sequence.If not provided, the item will be appended to the end of the sequence",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SequenceItemsQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 10000,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SequenceItemsSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/SequenceItemSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "SequenceSchema": {
        "properties": {
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "SequencesQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 10000,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SequencesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/SequenceSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ShareBaseSchema": {
        "properties": {
          "allow_approving_comments": {
            "type": "boolean"
          },
          "allow_comments": {
            "type": "boolean"
          },
          "allow_custom_actions": {
            "type": "boolean"
          },
          "allow_download": {
            "type": "boolean"
          },
          "allow_download_proxy": {
            "type": "boolean"
          },
          "allow_setting_approve_status": {
            "type": "boolean"
          },
          "allow_upload": {
            "type": "boolean"
          },
          "allow_user_search_for_mentions": {
            "type": "boolean"
          },
          "allow_view_transcriptions": {
            "type": "boolean"
          },
          "allow_view_versions": {
            "type": "boolean"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "expires": {
            "format": "date-time",
            "type": "string"
          },
          "has_password": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "is_approval": {
            "nullable": true,
            "type": "boolean"
          },
          "message": {
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "metadata_views": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "object_id": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "owner_id": {
            "readOnly": true,
            "type": "string"
          },
          "project_id": {
            "description": "Project ID if the share is created from a project",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "show_watermark": {
            "nullable": true,
            "type": "boolean"
          },
          "system_domain_id": {
            "readOnly": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "upload_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "url": {
            "nullable": true,
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "allow_approving_comments",
          "allow_comments",
          "allow_download",
          "allow_setting_approve_status"
        ],
        "type": "object"
      },
      "ShareCreateSchema": {
        "properties": {
          "allow_approving_comments": {
            "type": "boolean"
          },
          "allow_comments": {
            "type": "boolean"
          },
          "allow_custom_actions": {
            "type": "boolean"
          },
          "allow_download": {
            "type": "boolean"
          },
          "allow_download_proxy": {
            "type": "boolean"
          },
          "allow_setting_approve_status": {
            "type": "boolean"
          },
          "allow_upload": {
            "type": "boolean"
          },
          "allow_user_search_for_mentions": {
            "type": "boolean"
          },
          "allow_view_transcriptions": {
            "type": "boolean"
          },
          "allow_view_versions": {
            "type": "boolean"
          },
          "emails": {
            "items": {
              "format": "email",
              "type": "string"
            },
            "type": "array"
          },
          "expires": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "is_approval": {
            "nullable": true,
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "metadata_views": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "object_id": {
            "type": "string"
          },
          "object_type": {
            "type": "string"
          },
          "owner_id": {
            "readOnly": true,
            "type": "string"
          },
          "password": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "project_id": {
            "description": "Project ID if the share is created from a project",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "show_watermark": {
            "nullable": true,
            "type": "boolean"
          },
          "system_domain_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "upload_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "allow_approving_comments",
          "allow_comments",
          "allow_download",
          "allow_setting_approve_status",
          "emails"
        ],
        "type": "object"
      },
      "ShareElasticSchema": {
        "properties": {
          "allow_approving_comments": {
            "type": "boolean"
          },
          "allow_comments": {
            "type": "boolean"
          },
          "allow_custom_actions": {
            "type": "boolean"
          },
          "allow_download": {
            "type": "boolean"
          },
          "allow_download_proxy": {
            "type": "boolean"
          },
          "allow_setting_approve_status": {
            "type": "boolean"
          },
          "allow_upload": {
            "type": "boolean"
          },
          "allow_user_search_for_mentions": {
            "type": "boolean"
          },
          "allow_view_transcriptions": {
            "type": "boolean"
          },
          "allow_view_versions": {
            "type": "boolean"
          },
          "approval": {
            "readOnly": true,
            "type": "object"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "expires": {
            "format": "date-time",
            "type": "string"
          },
          "has_password": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "is_approval": {
            "type": "boolean"
          },
          "message": {
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "metadata_views": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "object_id": {
            "readOnly": true,
            "type": "string"
          },
          "object_title": {
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "owner_id": {
            "readOnly": true,
            "type": "string"
          },
          "personal_url": {
            "readOnly": true,
            "type": "string"
          },
          "project_id": {
            "description": "Project ID if the share is created from a project",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "show_watermark": {
            "nullable": true,
            "type": "boolean"
          },
          "system_domain_id": {
            "readOnly": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "upload_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "url": {
            "readOnly": true,
            "type": "string"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/ShareUsersElastic"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "required": [
          "allow_approving_comments",
          "allow_comments",
          "allow_download",
          "allow_setting_approve_status"
        ],
        "type": "object"
      },
      "ShareLoginSchema": {
        "properties": {
          "app_id": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "object_id": {
            "type": "string"
          },
          "object_type": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "hash"
        ],
        "type": "object"
      },
      "ShareOptionsBaseSchema": {
        "properties": {
          "allow_approving_comments": {
            "type": "boolean"
          },
          "allow_comments": {
            "type": "boolean"
          },
          "allow_custom_actions": {
            "type": "boolean"
          },
          "allow_download": {
            "type": "boolean"
          },
          "allow_download_proxy": {
            "type": "boolean"
          },
          "allow_setting_approve_status": {
            "type": "boolean"
          },
          "allow_upload": {
            "type": "boolean"
          },
          "allow_user_search_for_mentions": {
            "type": "boolean"
          },
          "allow_view_transcriptions": {
            "type": "boolean"
          },
          "allow_view_versions": {
            "type": "boolean"
          },
          "is_approval": {
            "nullable": true,
            "type": "boolean"
          },
          "metadata_views": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "show_watermark": {
            "nullable": true,
            "type": "boolean"
          },
          "upload_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "allow_approving_comments",
          "allow_comments",
          "allow_download",
          "allow_setting_approve_status"
        ],
        "type": "object"
      },
      "ShareRoles": {
        "properties": {
          "roles": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "ShareSchema": {
        "properties": {
          "allow_approving_comments": {
            "type": "boolean"
          },
          "allow_comments": {
            "type": "boolean"
          },
          "allow_custom_actions": {
            "type": "boolean"
          },
          "allow_download": {
            "type": "boolean"
          },
          "allow_download_proxy": {
            "type": "boolean"
          },
          "allow_setting_approve_status": {
            "type": "boolean"
          },
          "allow_upload": {
            "type": "boolean"
          },
          "allow_user_search_for_mentions": {
            "type": "boolean"
          },
          "allow_view_transcriptions": {
            "type": "boolean"
          },
          "allow_view_versions": {
            "type": "boolean"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "expires": {
            "format": "date-time",
            "type": "string"
          },
          "has_password": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "is_approval": {
            "nullable": true,
            "type": "boolean"
          },
          "message": {
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "metadata_views": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "object_id": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "owner_id": {
            "readOnly": true,
            "type": "string"
          },
          "project_id": {
            "description": "Project ID if the share is created from a project",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "show_watermark": {
            "nullable": true,
            "type": "boolean"
          },
          "system_domain_id": {
            "readOnly": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "upload_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "url": {
            "nullable": true,
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "allow_approving_comments",
          "allow_comments",
          "allow_download",
          "allow_setting_approve_status"
        ],
        "type": "object"
      },
      "ShareTokenSchema": {
        "properties": {
          "app_id": {
            "readOnly": true,
            "type": "string"
          },
          "email": {
            "format": "email",
            "type": "string"
          },
          "expires": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "object_id": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "share_id": {
            "readOnly": true,
            "type": "string"
          },
          "share_user_id": {
            "readOnly": true,
            "type": "string"
          },
          "system_domain_id": {
            "readOnly": true,
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "user_id": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "app_id",
          "email",
          "expires",
          "object_id",
          "object_type",
          "roles",
          "share_id",
          "share_user_id",
          "system_domain_id",
          "token",
          "user_id"
        ],
        "type": "object"
      },
      "ShareURLCreateSchema": {
        "properties": {
          "allow_approving_comments": {
            "type": "boolean"
          },
          "allow_comments": {
            "type": "boolean"
          },
          "allow_custom_actions": {
            "type": "boolean"
          },
          "allow_download": {
            "type": "boolean"
          },
          "allow_download_proxy": {
            "type": "boolean"
          },
          "allow_setting_approve_status": {
            "type": "boolean"
          },
          "allow_upload": {
            "type": "boolean"
          },
          "allow_user_search_for_mentions": {
            "type": "boolean"
          },
          "allow_view_transcriptions": {
            "type": "boolean"
          },
          "allow_view_versions": {
            "type": "boolean"
          },
          "expires": {
            "format": "date-time",
            "type": "string"
          },
          "is_approval": {
            "nullable": true,
            "type": "boolean"
          },
          "metadata_views": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "object_id": {
            "type": "string"
          },
          "object_type": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          },
          "password": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "show_watermark": {
            "nullable": true,
            "type": "boolean"
          },
          "system_domain_id": {
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "upload_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "allow_approving_comments",
          "allow_comments",
          "allow_download",
          "allow_setting_approve_status"
        ],
        "type": "object"
      },
      "ShareURLSchema": {
        "properties": {
          "allow_approving_comments": {
            "type": "boolean"
          },
          "allow_comments": {
            "type": "boolean"
          },
          "allow_custom_actions": {
            "type": "boolean"
          },
          "allow_download": {
            "type": "boolean"
          },
          "allow_download_proxy": {
            "type": "boolean"
          },
          "allow_setting_approve_status": {
            "type": "boolean"
          },
          "allow_upload": {
            "type": "boolean"
          },
          "allow_user_search_for_mentions": {
            "type": "boolean"
          },
          "allow_view_transcriptions": {
            "type": "boolean"
          },
          "allow_view_versions": {
            "type": "boolean"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "expires": {
            "format": "date-time",
            "type": "string"
          },
          "has_password": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "is_approval": {
            "nullable": true,
            "type": "boolean"
          },
          "message": {
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "metadata_views": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "object_id": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "owner_id": {
            "readOnly": true,
            "type": "string"
          },
          "project_id": {
            "description": "Project ID if the share is created from a project",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "show_watermark": {
            "nullable": true,
            "type": "boolean"
          },
          "system_domain_id": {
            "readOnly": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "upload_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "allow_approving_comments",
          "allow_comments",
          "allow_download",
          "allow_setting_approve_status"
        ],
        "type": "object"
      },
      "ShareUser": {
        "properties": {
          "access_count": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "email": {
            "format": "email",
            "type": "string"
          },
          "first_name": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "internal_user_id": {
            "type": "string"
          },
          "last_access_date": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "last_name": {
            "readOnly": true,
            "type": "string"
          },
          "object_id": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "photo": {
            "readOnly": true,
            "type": "string"
          },
          "photo_big": {
            "readOnly": true,
            "type": "string"
          },
          "photo_small": {
            "readOnly": true,
            "type": "string"
          },
          "share_id": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "ShareUserSchema": {
        "properties": {
          "access_count": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "email": {
            "format": "email",
            "type": "string"
          },
          "first_name": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "internal_user_id": {
            "type": "string"
          },
          "last_access_date": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "last_name": {
            "readOnly": true,
            "type": "string"
          },
          "object_id": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "photo": {
            "readOnly": true,
            "type": "string"
          },
          "photo_big": {
            "readOnly": true,
            "type": "string"
          },
          "photo_small": {
            "readOnly": true,
            "type": "string"
          },
          "share_id": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "ShareUsersElastic": {
        "properties": {
          "access_count": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "email": {
            "format": "email",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "last_access_date": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ShareUsersElasticSchema": {
        "properties": {
          "access_count": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "email": {
            "format": "email",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "last_access_date": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ShareUsersSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/ShareUserSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "SharesElasticSchema": {
        "properties": {
          "facets": {
            "type": "object"
          },
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/ShareElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SharesSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/ShareSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "StorageContentInfo": {
        "properties": {
          "assets_count": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          },
          "file_count": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          },
          "storage_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "total_duration_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          },
          "total_size": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "StorageContentInfoSchema": {
        "properties": {
          "assets_count": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          },
          "file_count": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          },
          "storage_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "total_duration_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          },
          "total_size": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SyncSessionCreateSchema": {
        "properties": {
          "current_dc_url": {
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "dc_url": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SyncSessionSchema": {
        "properties": {
          "current_dc_url": {
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "dc_url": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SynchronizeCollectionKeyframesSchema": {
        "properties": {
          "asset_ids": {
            "items": {
              "type": "string"
            },
            "maxItems": 3,
            "minItems": 0,
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "TranscriptionElementType": {
        "properties": {
          "end_ms": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "score": {
            "type": "number"
          },
          "start_ms": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "end_ms",
          "start_ms",
          "value"
        ],
        "type": "object"
      },
      "TranscriptionElementTypeSchema": {
        "properties": {
          "end_ms": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "score": {
            "type": "number"
          },
          "start_ms": {
            "format": "int64",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "type": "integer"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "end_ms",
          "start_ms",
          "value"
        ],
        "type": "object"
      },
      "TranscriptionType": {
        "properties": {
          "speaker": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "words": {
            "items": {
              "$ref": "#/components/schemas/TranscriptionElementType"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "words"
        ],
        "type": "object"
      },
      "TranscriptionTypeSchema": {
        "properties": {
          "speaker": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "words": {
            "items": {
              "$ref": "#/components/schemas/TranscriptionElementTypeSchema"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "words"
        ],
        "type": "object"
      },
      "User": {
        "properties": {
          "email": {
            "format": "email",
            "readOnly": true,
            "type": "string"
          },
          "first_name": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "last_name": {
            "readOnly": true,
            "type": "string"
          },
          "photo": {
            "readOnly": true,
            "type": "string"
          },
          "photo_big": {
            "readOnly": true,
            "type": "string"
          },
          "photo_small": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserSchema": {
        "properties": {
          "email": {
            "format": "email",
            "readOnly": true,
            "type": "string"
          },
          "first_name": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "last_name": {
            "readOnly": true,
            "type": "string"
          },
          "photo": {
            "readOnly": true,
            "type": "string"
          },
          "photo_big": {
            "readOnly": true,
            "type": "string"
          },
          "photo_small": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "info": {
    "title": "iconik Assets",
    "version": "2.0.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/": {},
    "/ip/": {},
    "/livez/": {},
    "/readyz/": {},
    "/spec/": {},
    "/static/{filename}": {},
    "/u/{key}/": {},
    "/v1/approvals/bulk/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_approval_status_in_bulk\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSetApprovalSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a job for bulk request & set approval"
      }
    },
    "/v1/approvals/bulk_remove/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_approval_status_in_bulk\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkRemoveApprovalSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a job for bulk approval status removal"
      }
    },
    "/v1/assets/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "If true passed then uses scroll pagination instead of default one",
            "in": "query",
            "name": "scroll",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "In order to get next batch of results using scroll pagination the scroll_id is required",
            "in": "query",
            "name": "scroll_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "filter by field_name",
            "in": "query",
            "name": "field_name",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSchema"
                }
              }
            },
            "description": "Returns a list of asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of assets"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkAssetEditSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Bulk assets update scheduled"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Bulk update assets"
      },
      "post": {
        "description": "\nRequired roles:\n - can_create_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Adds default ACLs to an asset",
            "in": "query",
            "name": "apply_default_acls",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Adds containing collection's ACLs to an asset",
            "in": "query",
            "name": "apply_collection_acls",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Adds the asset to the collection specified in the body",
            "in": "query",
            "name": "assign_to_collection",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "If the asset is a subclip, generate keyframes for it",
            "in": "query",
            "name": "generate_subclip_keyframes",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetCreateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetSchema"
                }
              }
            },
            "description": "Returns a created asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Permission denied"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new asset"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkAssetEditSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Bulk assets update scheduled"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Bulk update assets"
      }
    },
    "/v1/assets/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexAllAssetsSchema"
              }
            }
          },
          "description": "body",
          "required": false
        },
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Trigger reindexing of all assets"
      }
    },
    "/v1/assets/relation_types/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_asset_relations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationTypesSchema"
                }
              }
            },
            "description": "Returns a relation type"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new asset relation type"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_asset_relation_types\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationTypeSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationTypeSchema"
                }
              }
            },
            "description": "Returns a created relation type"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new asset relation type"
      }
    },
    "/v1/assets/relation_types/{relation_type}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_asset_relation_types\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "relation_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete an asset relation type"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_asset_relations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "relation_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationTypeSchema"
                }
              }
            },
            "description": "Returns a created relation"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get a relation type"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_asset_relation_types\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "relation_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationTypeSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationTypeSchema"
                }
              }
            },
            "description": "Update successful"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update an asset relation type"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_asset_relation_types\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "relation_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationTypeSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationTypeSchema"
                }
              }
            },
            "description": "Update successful"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update an asset relation type"
      }
    },
    "/v1/assets/segments/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexAllSegmentsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Trigger reindexing of all segments"
      }
    },
    "/v1/assets/{asset_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular asset by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "include collection membership",
            "in": "query",
            "name": "include_collections",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "include info about the users who have interacted with this asset",
            "in": "query",
            "name": "include_users",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetSchema"
                }
              }
            },
            "description": "Returns an asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular asset by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "If the asset is a subclip, generate keyframes for it",
            "in": "query",
            "name": "generate_subclip_keyframes",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetSchema"
                }
              }
            },
            "description": "Returns an updated asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update asset"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "If the asset is a subclip, generate keyframes for it",
            "in": "query",
            "name": "generate_subclip_keyframes",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetSchema"
                }
              }
            },
            "description": "Returns an updated asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update asset"
      }
    },
    "/v1/assets/{asset_id}/history/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_assets_history\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order For example - first_name,eq,Vlad;last_name,eq,Gudkov",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetHistoryEntitiesSchema"
                }
              }
            },
            "description": "Returns a list of asset history entities"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of history entities for asset"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_assets_history\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetHistorySchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetHistorySchema"
                }
              }
            },
            "description": "Returns a created asset history entity"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset Id doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create an asset history entity"
      }
    },
    "/v1/assets/{asset_id}/history/{history_entity_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_assets_history\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "history_entity_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetHistorySchema"
                }
              }
            },
            "description": "Returns a created asset history entity"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Deletes an asset history entity"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_assets_history\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "history_entity_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetHistorySchema"
                }
              }
            },
            "description": "Returns a created asset history entity"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get an asset history entity"
      }
    },
    "/v1/assets/{asset_id}/history/{history_entity_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_assets_history\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "history_entity_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset history entity does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex asset history entity"
      }
    },
    "/v1/assets/{asset_id}/purge/": {
      "delete": {
        "description": "\nRequired roles:\n - can_purge_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Purges a particular asset by id immediately"
      }
    },
    "/v1/assets/{asset_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexAssetSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex asset"
      }
    },
    "/v1/assets/{asset_id}/relations/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_asset_relations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Also show assets from recycle bin in relations",
            "in": "query",
            "name": "include_deleted",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSchema"
                }
              }
            },
            "description": "Returns a list of assets"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns an assets relations"
      },
      "post": {
        "description": "\nRequired roles:\n - can_create_asset_relations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationSchema"
                }
              }
            },
            "description": "Returns an existing relation"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationSchema"
                }
              }
            },
            "description": "Returns a created relation"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new asset relation"
      }
    },
    "/v1/assets/{asset_id}/relations/{relation_type}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_asset_relations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "relation_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Also show assets from recycle bin in relations",
            "in": "query",
            "name": "include_deleted",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSchema"
                }
              }
            },
            "description": "Returns a list of assets"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns assets that has a relation to this asset"
      }
    },
    "/v1/assets/{asset_id}/relations/{relation_type}/{related_to_asset_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_asset_relations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "relation_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "related_to_asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular asset by id"
      },
      "post": {
        "description": "\nRequired roles:\n - can_create_asset_relations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "relation_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "related_to_asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationSchema"
                }
              }
            },
            "description": "Returns an existing relation"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationSchema"
                }
              }
            },
            "description": "Returns a created relation"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new asset relation"
      }
    },
    "/v1/assets/{asset_id}/relations/{relation_type}/{related_to_asset_id}/reverse/": {
      "post": {
        "description": "\nRequired roles:\n - can_create_asset_relations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "relation_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "related_to_asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationSchema"
                }
              }
            },
            "description": "Update successful"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reverse a particular asset's relation"
      }
    },
    "/v1/assets/{asset_id}/restore/": {
      "put": {
        "description": "\nRequired roles:\n - can_write_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Restore deleted asset by id"
      }
    },
    "/v1/assets/{asset_id}/search_document/": {
      "put": {
        "deprecated": true,
        "description": "\nRequired roles:\n - can_reindex_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetElasticSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Asset metadata updated"
          },
          "400": {
            "description": "No metadata supplied"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist in search index"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update metadata for asset"
      }
    },
    "/v1/assets/{asset_id}/segments/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Sort on field (Comma separated)",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only include these segments (Comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search using query",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only include fields (Comma separated)",
            "in": "query",
            "name": "includes",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "If true passed then uses scroll pagination instead of default one",
            "in": "query",
            "name": "scroll",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "In order to get next batch of results using scroll pagination the scroll_id is required\n",
            "in": "query",
            "name": "scroll_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by transcription_id",
            "in": "query",
            "name": "transcription_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by version_id",
            "in": "query",
            "name": "version_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by segment_type",
            "in": "query",
            "name": "segment_type",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by segment_color",
            "in": "query",
            "name": "segment_color",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by time_start_milliseconds",
            "in": "query",
            "name": "time_start_milliseconds",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by time_end_milliseconds",
            "in": "query",
            "name": "time_end_milliseconds",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Get segments with start time greater than or equal to time_start_milliseconds__gte\n",
            "in": "query",
            "name": "time_start_milliseconds__gte",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Get segments with end time less than or equal to time_end_milliseconds__lte",
            "in": "query",
            "name": "time_end_milliseconds__lte",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by status",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by person_id",
            "in": "query",
            "name": "person_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by share_id",
            "in": "query",
            "name": "share_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by project_id",
            "in": "query",
            "name": "project_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Include segment's authors info",
            "in": "query",
            "name": "include_users",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "If true return asset's segments for all versions",
            "in": "query",
            "name": "include_all_versions",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentsSchema"
                }
              }
            },
            "description": "Returns a list of segments"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Page number does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of segments"
      },
      "post": {
        "description": "\nRequired roles:\n - can_create_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "This header is used for shares by URL to identify user. Only valid emails are allowed.",
            "in": "header",
            "name": "Share-User-Email",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SegmentSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentSchema"
                }
              }
            },
            "description": "Returns a created segment"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new segment"
      }
    },
    "/v1/assets/{asset_id}/segments/bulk/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "If false, delete segments asynchronously",
            "in": "query",
            "name": "immediately",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "If false, reindex",
            "in": "query",
            "name": "ignore_reindexing",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteSegmentsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Segment ids or segment type not provided correctly"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "No segments found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete segments with either ids or by type"
      },
      "post": {
        "description": "\nRequired roles:\n - can_create_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCreateSegmentsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns ID and status of a job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create multiple new segments for a single asset"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "If the segment is a subclip, generate keyframes for it",
            "in": "query",
            "name": "generate_subclip_keyframes",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkEditAssetSegmentsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns ID and status of a job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Edit multiple asset segments"
      }
    },
    "/v1/assets/{asset_id}/segments/csv/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Only include these segments (Comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search using query",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by transcription_id",
            "in": "query",
            "name": "transcription_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by version_id",
            "in": "query",
            "name": "version_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by segment_type",
            "in": "query",
            "name": "segment_type",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by segment_color",
            "in": "query",
            "name": "segment_color",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns a list of segments as CSV file"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Page number does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of segments as CSV file"
      }
    },
    "/v1/assets/{asset_id}/segments/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexSegmentSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex assets segments"
      }
    },
    "/v1/assets/{asset_id}/segments/srt/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Only include these segments (Comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search using query",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by transcription_id",
            "in": "query",
            "name": "transcription_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by version_id",
            "in": "query",
            "name": "version_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by segment_type",
            "in": "query",
            "name": "segment_type",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by segment_color",
            "in": "query",
            "name": "segment_color",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Limit the number of words per subtitle line",
            "in": "query",
            "name": "words_per_line",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/srt": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns a list of segments as SRT file"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Page number does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of segments as SRT file"
      }
    },
    "/v1/assets/{asset_id}/segments/vtt/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Only include these segments (Comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search using query",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by transcription_id",
            "in": "query",
            "name": "transcription_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by version_id",
            "in": "query",
            "name": "version_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by segment_type",
            "in": "query",
            "name": "segment_type",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by segment_color",
            "in": "query",
            "name": "segment_color",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Limit the number of words per subtitle line",
            "in": "query",
            "name": "words_per_line",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/vtt": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns a list of segments as VTT file"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Page number does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of segments as WebVTT file"
      }
    },
    "/v1/assets/{asset_id}/segments/{segment_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "segment_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "soft_delete",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Segment not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular segment from an asset by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "segment_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "If true passed then uses scroll pagination instead of default one",
            "in": "query",
            "name": "scroll",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "In order to get next batch of results using scroll pagination the scroll_id is required\n",
            "in": "query",
            "name": "scroll_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentSchema"
                }
              }
            },
            "description": "Returns a segment"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Segment does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get a segment by ID"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "segment_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "If the segment is a subclip, generate keyframes for it",
            "in": "query",
            "name": "generate_subclip_keyframes",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditSegmentSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentSchema"
                }
              }
            },
            "description": "Returns an updated segment"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Segment does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update segment"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "segment_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "If the segment is a subclip, generate keyframes for it",
            "in": "query",
            "name": "generate_subclip_keyframes",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditSegmentSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentSchema"
                }
              }
            },
            "description": "Returns an updated segment"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Segment does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update segment"
      }
    },
    "/v1/assets/{asset_id}/segments/{segment_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "segment_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexSegmentSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset segment does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex assets segment"
      }
    },
    "/v1/assets/{asset_id}/segments/{segment_type}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "segment_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Sort on field (Comma separated)",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only include these segments (Comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search using query",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only include fields (Comma separated)",
            "in": "query",
            "name": "includes",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "If true passed then uses scroll pagination instead of default one",
            "in": "query",
            "name": "scroll",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "In order to get next batch of results using scroll pagination the scroll_id is required\n",
            "in": "query",
            "name": "scroll_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by time_start_milliseconds",
            "in": "query",
            "name": "time_start_milliseconds",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by time_end_milliseconds",
            "in": "query",
            "name": "time_end_milliseconds",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Get segments with start time greater than or equal to time_start_milliseconds__gte\n",
            "in": "query",
            "name": "time_start_milliseconds__gte",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Get segments with end time less than or equal to time_end_milliseconds__lte",
            "in": "query",
            "name": "time_end_milliseconds__lte",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentsSchema"
                }
              }
            },
            "description": "Returns a list of segments"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Page number does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of segments"
      }
    },
    "/v1/assets/{asset_id}/uploads/": {
      "delete": {
        "description": "\nRequired roles:\n - can_create_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular asset by id on failed uplaod"
      }
    },
    "/v1/assets/{asset_id}/versions/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_versions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssetVersionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetVersionsSchema"
                }
              }
            },
            "description": "Returns an updated asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add asset version"
      }
    },
    "/v1/assets/{asset_id}/versions/from/assets/{source_asset_id}/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_versions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "source_asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssetVersionFromAssetSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Returns nothing"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Source or destination asset does not exist"
          },
          "409": {
            "description": "The asset is being transcoded and cannot be set as a new version"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new asset's version from another asset"
      }
    },
    "/v1/assets/{asset_id}/versions/from/versions/{source_version_id}/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_versions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "source_version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssetVersionFromVersionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Returns version id"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Source or destination asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new asset's version from another version"
      }
    },
    "/v1/assets/{asset_id}/versions/old/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_versions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete all asset versions except the latest one"
      }
    },
    "/v1/assets/{asset_id}/versions/{version_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_versions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "completely remove the version",
            "in": "query",
            "name": "hard_delete",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular asset version by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_versions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetVersionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetVersionSchema"
                }
              }
            },
            "description": "Returns an updated asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Edit asset version"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_versions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetVersionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetVersionSchema"
                }
              }
            },
            "description": "Returns an updated asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Edit asset version"
      }
    },
    "/v1/assets/{asset_id}/versions/{version_id}/promote/": {
      "put": {
        "description": "\nRequired roles:\n - can_write_versions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Promote a particular asset version to a latest version"
      }
    },
    "/v1/assets/{asset_id}/versions/{version_id}/transcriptions/properties/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_transcriptions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetTranscriptionsPropertiesSchema"
                }
              }
            },
            "description": "Returns a list of transcription properties"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transcription does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get a list of transcription properties"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_transcriptions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetTranscriptionPropertiesSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetTranscriptionPropertiesSchema"
                }
              }
            },
            "description": "Returns transcription properties"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transcription properties do not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add a new transcription properties"
      }
    },
    "/v1/assets/{asset_id}/versions/{version_id}/transcriptions/subtitles/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_transcriptions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetTranscriptionFromSubtitleSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetTranscriptionPropertiesSchema"
                }
              }
            },
            "description": "Returns transcription properties"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transcription properties do not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add a new transcription properties"
      }
    },
    "/v1/assets/{asset_id}/versions/{version_id}/transcriptions/{transcription_id}/properties/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_transcriptions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcription_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transcription properties do not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete transcription properties by ID"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_transcriptions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcription_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetTranscriptionPropertiesSchema"
                }
              }
            },
            "description": "Returns a transcription properties"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transcription properties do not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get a transcription properties by ID"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_transcriptions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcription_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetTranscriptionPropertiesSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetTranscriptionPropertiesSchema"
                }
              }
            },
            "description": "Returns transcription properties"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transcription properties do not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update transcription properties by ID"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_transcriptions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcription_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetTranscriptionPropertiesSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetTranscriptionPropertiesSchema"
                }
              }
            },
            "description": "Returns transcription properties"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transcription properties do not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update transcription properties by ID"
      }
    },
    "/v1/assets/{asset_id}/views/": {
      "post": {
        "description": "\nRequired roles:\n - can_read_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetSchema"
                }
              }
            },
            "description": "Returns an updated asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Mark asset as viewed"
      }
    },
    "/v1/collections/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "If true passed then uses scroll pagination instead of default one",
            "in": "query",
            "name": "scroll",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "In order to get next batch of results using scroll pagination the scroll_id is required",
            "in": "query",
            "name": "scroll_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - title,asc;is_root,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by is_root",
            "in": "query",
            "name": "is_root",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by status",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionsSchema"
                }
              }
            },
            "description": "Returns a list of collections"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of collections"
      },
      "post": {
        "description": "\nRequired roles:\n - can_create_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Adds default ACLs to a collection",
            "in": "query",
            "name": "apply_default_acls",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Adds containing collection's ACLs to a collection",
            "in": "query",
            "name": "apply_collection_acls",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Restricts ACLS to containing collection's ACLs",
            "in": "query",
            "name": "restrict_collection_acls",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionInputSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionSchema"
                }
              }
            },
            "description": "Returns a created collection"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new collection"
      }
    },
    "/v1/collections/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexAllCollectionsSchema"
              }
            }
          },
          "description": "body",
          "required": false
        },
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Trigger reindexing of all collections"
      }
    },
    "/v1/collections/{collection_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "Deletion has been scheduled"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular collection by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionSchema"
                }
              }
            },
            "description": "Returns a collection"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular collection by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Set to 'move' or 'copy'. Ignored if 'parent_id' hasn't changed",
            "in": "query",
            "name": "change_parent_mode",
            "schema": {
              "default": "move",
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionInputSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionSchema"
                }
              }
            },
            "description": "Returns an updated collection"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update collection"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Set to 'move' or 'copy'. Ignored if 'parent_id' hasn't changed",
            "in": "query",
            "name": "change_parent_mode",
            "schema": {
              "default": "move",
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionInputSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionSchema"
                }
              }
            },
            "description": "Returns an updated collection"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update collection"
      }
    },
    "/v1/collections/{collection_id}/ancestors/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionsSchema"
                }
              }
            },
            "description": "Returns a collections content"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns list of ancestors of a collection"
      }
    },
    "/v1/collections/{collection_id}/content/info/": {
      "get": {
        "description": "plus total size (in bytes) and total duration (in milliseconds) of all video/audio assets.plus total size (in bytes) and total duration (in milliseconds) of all video/audio assets.\nRequired roles:\n - can_read_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "If false, include all the contents",
            "in": "query",
            "name": "only_active",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Compute total stats including assets from sub-collections",
            "in": "query",
            "name": "include_subcollections",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Compute total size only for files with the specified format name (default - ORIGINAL)",
            "in": "query",
            "name": "format_name",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Group results by storage_id / storage_method",
            "in": "query",
            "name": "by_storage_id",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionContentInfoSchema"
                }
              }
            },
            "description": "Returns counts, total size, total duration, and optional grouping"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns all sub-collections and assets number for a specific collection,"
      }
    },
    "/v1/collections/{collection_id}/contents/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Comma separated list of content types. Example - assets,collections",
            "in": "query",
            "name": "object_types",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Comma separated list of content ids.",
            "in": "query",
            "name": "object_ids",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "external_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order For example - first_name,eq,Vlad;last_name,eq,Gudkov",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSchema"
                }
              }
            },
            "description": "Returns a collections content"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns contents of a collection by id"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionContentSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Content added"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add an object to a collection"
      }
    },
    "/v1/collections/{collection_id}/contents/ordering/custom/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Disables custom ordering for a collection's content"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Disable custom ordering for a collection's content"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCollectionContentOrderingSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Schedules a background job that will order the collection"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Enable custom ordering for a collection's content"
      }
    },
    "/v1/collections/{collection_id}/contents/{object_type}/{object_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Content object not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular content object in a collection by id"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionContentOrderingSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Content object not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update an order of a particular content object in a collection"
      }
    },
    "/v1/collections/{collection_id}/contents/{object_type}/{object_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexCollectionContentSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection content does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex collection content"
      }
    },
    "/v1/collections/{collection_id}/full/path/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Use to get the upload path instead of the full path",
            "in": "query",
            "name": "get_upload_path",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Full path including all the ancestors / the upload path"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Gets the full path of the collection"
      }
    },
    "/v1/collections/{collection_id}/keyframes/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SynchronizeCollectionKeyframesSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Transcode job started"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Pick up to three asset_ids for collection keyframes"
      }
    },
    "/v1/collections/{collection_id}/purge/": {
      "delete": {
        "description": "\nRequired roles:\n - can_purge_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "Status and job_id"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Forbidden - Collection is not empty"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Purges deleted collection by id immediately"
      }
    },
    "/v1/collections/{collection_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexCollectionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex collection"
      }
    },
    "/v1/collections/{collection_id}/reindex/contents/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex collection and its content"
      }
    },
    "/v1/collections/{collection_id}/restore/": {
      "put": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Forbidden - Collection is not empty"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Restore deleted collection by id"
      }
    },
    "/v1/collections/{collection_id}/search_document/": {
      "put": {
        "deprecated": true,
        "description": "\nRequired roles:\n - can_reindex_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Collection metadata updated"
          },
          "400": {
            "description": "No metadata supplied"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist in search index"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update metadata for collection"
      }
    },
    "/v1/collections/{collection_id}/size/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Compute total size only for files with the specified format name",
            "in": "query",
            "name": "format_name",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Compute total size for all files including sub_collections' assets",
            "in": "query",
            "name": "include_subcollections",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionSizeSchema"
                }
              }
            },
            "description": "Returns the size of all the collection's assets"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns the size of all the collection's assets in bytes"
      }
    },
    "/v1/collections/{collection_id}/subcollections/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Copy collection acls.",
            "in": "query",
            "name": "copy_acl",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Copy collection keyframes.",
            "in": "query",
            "name": "copy_keyframes",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionContentSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionSchema"
                }
              }
            },
            "description": "Returns an updated collection"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Copy a collection (recursively) in to another collection"
      }
    },
    "/v1/custom_actions/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_custom_actions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActionsSchema"
                }
              }
            },
            "description": "Returns a list of custom actions"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of custom actions"
      }
    },
    "/v1/custom_actions/shared/{context}/{action_id}/callback/": {
      "post": {
        "description": "\nRequired roles:\n - can_read_custom_actions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "context",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "action_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomActionCallbackSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActionCallbackReplySchema"
                }
              }
            },
            "description": "Returns a custom action reply"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Schedules a celery task that will call custom action on shares"
      }
    },
    "/v1/custom_actions/{context}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_custom_actions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "context",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActionsSchema"
                }
              }
            },
            "description": "Returns a list of custom actions by context"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of custom actions by context"
      },
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "context",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomActionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActionSchema"
                }
              }
            },
            "description": "Returns a created custom action"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create an custom action"
      }
    },
    "/v1/custom_actions/{context}/{action_id}/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "context",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "action_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActionSchema"
                }
              }
            },
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Deletes an custom action"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_custom_actions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "context",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "action_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActionSchema"
                }
              }
            },
            "description": "Returns a created asset custom action"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get an asset custom action"
      },
      "patch": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "context",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "action_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomActionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActionSchema"
                }
              }
            },
            "description": "Returns an created custom action"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update an custom action"
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "context",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "action_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomActionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActionSchema"
                }
              }
            },
            "description": "Returns an created custom action"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update an custom action"
      }
    },
    "/v1/custom_actions/{context}/{action_id}/callback/": {
      "post": {
        "description": "\nRequired roles:\n - can_read_custom_actions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "context",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "action_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomActionCallbackSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActionCallbackReplySchema"
                }
              }
            },
            "description": "Returns a custom action reply"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Schedules a celery task that will call custom action"
      }
    },
    "/v1/delete_queue/assets/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteQueueSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete assets from delete queue (Mark assets as active again)"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order For example - first_name,eq,Vlad;last_name,eq,Gudkov",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSchema"
                }
              }
            },
            "description": "Returns a list of asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get deleted objects"
      },
      "post": {
        "description": "\nRequired roles:\n - can_delete_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteQueueSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add assets to a delete queue (Mark assets as deleted)"
      }
    },
    "/v1/delete_queue/assets/purge/": {
      "post": {
        "description": "\nRequired roles:\n - can_purge_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteQueueSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Purge assets from delete queue (Permanently delete)"
      }
    },
    "/v1/delete_queue/assets/purge/all/": {
      "post": {
        "description": "\nRequired roles:\n - can_purge_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "User does not have permission"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Purge all assets from delete queue (Permanently delete)"
      }
    },
    "/v1/delete_queue/assets/restore/all/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "User does not have permission"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Restore all assets from delete queue"
      }
    },
    "/v1/delete_queue/bulk/": {
      "post": {
        "description": "\nRequired roles:\n - can_delete_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDeleteSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Bulk delete was scheduled"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Bulk delete objects"
      }
    },
    "/v1/delete_queue/collections/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteQueueSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Forbidden - Collection is not empty"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete collections from delete queue (Mark collections as active again)"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order For example - first_name,eq,Vlad;last_name,eq,Gudkov",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionsSchema"
                }
              }
            },
            "description": "Returns a list of collections"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of collections"
      },
      "post": {
        "description": "\nRequired roles:\n - can_delete_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteQueueSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Forbidden - Collection is not empty"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add collections to a delete queue (Mark collections as deleted)"
      }
    },
    "/v1/delete_queue/collections/purge/": {
      "post": {
        "description": "\nRequired roles:\n - can_purge_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteQueueSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Forbidden - Collection is not empty"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Purge collections from delete queue (Permanently delete)"
      }
    },
    "/v1/delete_queue/collections/purge/all/": {
      "post": {
        "description": "\nRequired roles:\n - can_purge_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "User does not have permission"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Purge all collections from delete queue (Permanently delete)"
      }
    },
    "/v1/delete_queue/collections/restore/all/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "User does not have permission"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Restore all collections from delete queue"
      }
    },
    "/v1/delete_queue/purge/all/": {
      "post": {
        "description": "\nRequired roles:\n - can_purge_assets\n- can_purge_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "User does not have permission"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Purge all assets and collections from delete queue (Permanently delete)"
      }
    },
    "/v1/favorites/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_favorites\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDeleteFromFavoritesSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkDeleteFromFavoritesSchema"
                }
              }
            },
            "description": "Returns a list of object IDs that were removed from favorites"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Deletes objects items from a list of favorites"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of objects for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - title,asc;date_created,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoritesSchema"
                }
              }
            },
            "description": "Returns list of favorite objects"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of favorite objects"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_favorites\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkAddToFavoritesSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAddToFavoritesSchema"
                }
              }
            },
            "description": "Returns a list of object IDs that were added to favorites"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Adds multiple objects to a list of favorites"
      }
    },
    "/v1/favorites/all/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_favorites\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "A background task for deleting all from favourites was scheduled"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Removes all assets/collections from the list of favourites"
      }
    },
    "/v1/favourites/all/": {
      "delete": {
        "deprecated": true,
        "description": "\nRequired roles:\n - can_delete_favorites\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "A background task for deleting all from favourites was scheduled"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Removes all assets/collections from the list of favourites"
      }
    },
    "/v1/persons/{person_id}/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "person_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "asset_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSchema"
                }
              }
            },
            "description": "Returns a list of assets containing the person_id or specific versions of an asset containing the person_id"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all assets containing a person_id or specific versions of an asset containing a person_id"
      }
    },
    "/v1/playlists/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_playlists\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "If true passed then uses scroll pagination instead of default one",
            "in": "query",
            "name": "scroll",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "In order to get next batch of results using scroll pagination the scroll_id is required",
            "in": "query",
            "name": "scroll_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - title,asc;date_created,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by status",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistsSchema"
                }
              }
            },
            "description": "Returns a list of playlists"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of playlists"
      },
      "post": {
        "description": "\nRequired roles:\n - can_create_playlists\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaylistCreateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistSchema"
                }
              }
            },
            "description": "Returns a created playlist"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new playlist"
      }
    },
    "/v1/playlists/{playlist_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_playlists\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "playlist_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Playlist does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular playlist by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_playlists\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "playlist_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistSchema"
                }
              }
            },
            "description": "Returns a playlist"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular playlist by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_playlists\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "playlist_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaylistSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistSchema"
                }
              }
            },
            "description": "Returns an updated playlist"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Playlist does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update a playlist"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_playlists\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "playlist_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaylistSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistSchema"
                }
              }
            },
            "description": "Returns an updated playlist"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Playlist does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update a playlist"
      }
    },
    "/v1/playlists/{playlist_id}/items/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_playlists\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "playlist_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Filter list of id:s (comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistItemsSchema"
                }
              }
            },
            "description": "Returns a list of playlist's items"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of playlist's items"
      },
      "post": {
        "description": "\nRequired roles:\n - can_add_playlist_items\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "playlist_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaylistItemSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistItemSchema"
                }
              }
            },
            "description": "Returns a created item"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add an item to a playlist"
      }
    },
    "/v1/playlists/{playlist_id}/items/{item_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_playlist_items\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "playlist_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Playlist does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular playlist item by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_update_playlist_items\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "playlist_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaylistItemSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistItemSchema"
                }
              }
            },
            "description": "Returns an updated item"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update a playlist item"
      },
      "put": {
        "description": "\nRequired roles:\n - can_update_playlist_items\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "playlist_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaylistItemSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistItemSchema"
                }
              }
            },
            "description": "Returns an updated item"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update a playlist item"
      }
    },
    "/v1/playlists/{playlist_id}/items/{item_id}/position/": {
      "put": {
        "description": "\nRequired roles:\n - can_update_playlist_items_position\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "playlist_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaylistItemUpdatePositionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistItemSchema"
                }
              }
            },
            "description": "Returns an updated item"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update a playlist item position"
      }
    },
    "/v1/playlists/{playlist_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_playlists\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "playlist_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexPlaylistSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Playlist does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex the playlist"
      }
    },
    "/v1/projects/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_projects\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "If true passed then uses scroll pagination instead of default one",
            "in": "query",
            "name": "scroll",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "In order to get next batch of results using scroll pagination the scroll_id is required",
            "in": "query",
            "name": "scroll_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - title,asc;date_created,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by status",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectsSchema"
                }
              }
            },
            "description": "Returns a list of projects"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of projects"
      },
      "post": {
        "description": "\nRequired roles:\n - can_create_projects\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectSchema"
                }
              }
            },
            "description": "Returns a created project"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new project"
      }
    },
    "/v1/projects/{project_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_projects\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "Deletion has been scheduled"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Project does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular project by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_projects\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "include info about the users who have interacted with this project",
            "in": "query",
            "name": "include_users",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectSchema"
                }
              }
            },
            "description": "Returns a project"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular project by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_projects\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectSchema"
                }
              }
            },
            "description": "Returns an updated project"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Project does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update project"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_projects\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectSchema"
                }
              }
            },
            "description": "Returns an updated project"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Project does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update project"
      }
    },
    "/v1/projects/{project_id}/members/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_projects\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMembersSchema"
                }
              }
            },
            "description": "Returns a list of project members"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of project's members"
      },
      "post": {
        "description": "\nRequired roles:\n - can_add_project_members\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectMemberCreateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMemberSchema"
                }
              }
            },
            "description": "Returns a created member"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add a member to a project"
      }
    },
    "/v1/projects/{project_id}/members/{member_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_project_members\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "member_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Project does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular project member by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_projects\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "member_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMemberSchema"
                }
              }
            },
            "description": "Returns a project member"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular project member by id"
      }
    },
    "/v1/projects/{project_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_projects\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexProjectSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Project does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex the project"
      }
    },
    "/v1/reindex/bulk/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexBulkActionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a job for bulk reindexing of assets"
      }
    },
    "/v1/segments/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexSegmentsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Trigger reindexing of specific segment ids"
      }
    },
    "/v1/sequences/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_sequences\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "If true passed then uses scroll pagination instead of default one",
            "in": "query",
            "name": "scroll",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "In order to get next batch of results using scroll pagination the scroll_id is required",
            "in": "query",
            "name": "scroll_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - title,asc;date_created,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by status",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SequencesSchema"
                }
              }
            },
            "description": "Returns a list of sequences"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of sequences"
      },
      "post": {
        "description": "\nRequired roles:\n - can_create_sequences\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SequenceCreateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceSchema"
                }
              }
            },
            "description": "Returns a created sequence"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new sequence"
      }
    },
    "/v1/sequences/{sequence_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_sequences\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "sequence_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Sequence does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular sequence by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_sequences\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "sequence_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceSchema"
                }
              }
            },
            "description": "Returns a sequence"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular sequence by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_sequences\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "sequence_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SequenceSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceSchema"
                }
              }
            },
            "description": "Returns an updated sequence"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Sequence does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update a sequence"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_sequences\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "sequence_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SequenceSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceSchema"
                }
              }
            },
            "description": "Returns an updated sequence"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Sequence does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update a sequence"
      }
    },
    "/v1/sequences/{sequence_id}/items/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_sequences\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "sequence_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceItemsSchema"
                }
              }
            },
            "description": "Returns a list of sequences"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of sequence's items"
      },
      "post": {
        "description": "\nRequired roles:\n - can_add_sequence_items\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "sequence_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SequenceItemSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceItemSchema"
                }
              }
            },
            "description": "Returns a created item"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add an item to a sequence"
      }
    },
    "/v1/sequences/{sequence_id}/items/{item_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_sequence_items\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "sequence_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Sequence does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular sequence item by id"
      }
    },
    "/v1/sequences/{sequence_id}/items/{item_id}/position/": {
      "put": {
        "description": "\nRequired roles:\n - can_add_sequence_items\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "sequence_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SequenceItemUpdatePositionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceItemSchema"
                }
              }
            },
            "description": "Returns an updated item"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update a sequence item position"
      }
    },
    "/v1/sequences/{sequence_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_sequences\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "sequence_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexSequenceSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Sequence does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex the sequence"
      }
    },
    "/v1/share/{object_type}/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkShareCreateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareSchema"
                }
              }
            },
            "description": "Returns a created share"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Shares are restricted by system administator"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new share of multiple objects (currently only assets are supported)"
      }
    },
    "/v1/shares/": {
      "get": {
        "description": "\nRequired roles:\n - can_manage_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Filter by title",
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by object_type",
            "in": "query",
            "name": "object_type",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by object_id",
            "in": "query",
            "name": "object_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter list of id:s (comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by title with wildcard support",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter shares that have all fields specified in _exists_ (comma separated)",
            "in": "query",
            "name": "_exists_",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by date_created. Can either be a single ISO8601 timestamp or two timestamps separated by a semicolon `;`. The timestamp can also be expressed as number of milliseconds since Jan 1 1970 (epoch). Either timestamp can also be replaced with an asterisk `*` to make the query open ended.\nFor example: 2018-01-01T10:00:00Z;2018-01-01T15:00:00Z",
            "in": "query",
            "name": "date_created",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by date_modified Can either be a single ISO8601 timestamp or two timestamps separated by a semicolon `;`. The timestamp can also be expressed as number of milliseconds since Jan 1 1970 (epoch). Either timestamp can also be replaced with an asterisk `*` to make the query open ended.\nFor example: *;1544450400",
            "in": "query",
            "name": "date_modified",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by expires Can either be a single ISO8601 timestamp or two timestamps separated by a semicolon `;`. The timestamp can also be expressed as number of milliseconds since Jan 1 1970 (epoch). Either timestamp can also be replaced with an asterisk `*` to make the query open ended.\nFor example: *;1544450400",
            "in": "query",
            "name": "expires",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Include shares where the current user is a member of the share",
            "in": "query",
            "name": "include_member_of",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "If true passed then uses scroll pagination instead of default one",
            "in": "query",
            "name": "scroll",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "In order to get next batch of results using scroll pagination the scroll_id is required",
            "in": "query",
            "name": "scroll_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - title,asc;object_type,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharesElasticSchema"
                }
              }
            },
            "description": "Returns a list of shares"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get a list of user's shares"
      }
    },
    "/v1/shares/all/": {
      "get": {
        "description": "\nRequired roles:\n - can_manage_all_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Filter by title",
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by object_type",
            "in": "query",
            "name": "object_type",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by object_id",
            "in": "query",
            "name": "object_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by owner_id",
            "in": "query",
            "name": "owner_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by member_id",
            "in": "query",
            "name": "member_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter list of id:s (comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by other parameter with wildcard support",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter shares that have all fields specified in _exists_ (comma separated)",
            "in": "query",
            "name": "_exists_",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by date_created. Can either be a single ISO8601 timestamp or two timestamps separated by a semicolon `;`. The timestamp can also be expressed as number of milliseconds since Jan 1 1970 (epoch). Either timestamp can also be replaced with an asterisk `*` to make the query open ended.\nFor example: 2018-01-01T10:00:00Z;2018-01-01T15:00:00Z",
            "in": "query",
            "name": "date_created",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by date_modified Can either be a single ISO8601 timestamp or two timestamps separated by a semicolon `;`. The timestamp can also be expressed as number of milliseconds since Jan 1 1970 (epoch). Either timestamp can also be replaced with an asterisk `*` to make the query open ended.\nFor example: *;1544450400",
            "in": "query",
            "name": "date_modified",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by expires Can either be a single ISO8601 timestamp or two timestamps separated by a semicolon `;`. The timestamp can also be expressed as number of milliseconds since Jan 1 1970 (epoch). Either timestamp can also be replaced with an asterisk `*` to make the query open ended.\nFor example: *;1544450400",
            "in": "query",
            "name": "expires",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "If true passed then uses scroll pagination instead of default one",
            "in": "query",
            "name": "scroll",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "In order to get next batch of results using scroll pagination the scroll_id is required",
            "in": "query",
            "name": "scroll_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - title,asc;object_type,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharesElasticSchema"
                }
              }
            },
            "description": "Returns a list of shares"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get a list of all domain shares"
      }
    },
    "/v1/shares/auth/login/": {
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareLoginSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareTokenSchema"
                }
              }
            },
            "description": "Returns a token"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Login for share"
      }
    },
    "/v1/shares/auth/token/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Share-Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareTokenSchema"
                }
              }
            },
            "description": "Returns an updated share"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Check if a token is valid"
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Share-Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareTokenSchema"
                }
              }
            },
            "description": "Returns a newly generated token"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Refreshes a token for share"
      }
    },
    "/v1/shares/bulk/": {
      "delete": {
        "description": "\nRequired roles:\n - can_manage_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkShareDeleteSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete current user's multiple shares by ids"
      }
    },
    "/v1/shares/bulk/all/": {
      "delete": {
        "description": "\nRequired roles:\n - can_manage_all_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkShareDeleteSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete multiple shares by ids"
      }
    },
    "/v1/shares/{share_id}/upload_path/": {},
    "/v1/stats/{system_domain_id}/assets/": {},
    "/v1/sync/sessions/": {
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncSessionCreateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncSessionSchema"
                }
              }
            },
            "description": "Returns a created sync session"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new sync session"
      }
    },
    "/v1/sync/sessions/{sync_session_id}/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "sync_session_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Playlist does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular sync session by id"
      },
      "get": {
        "description": "a new one is created",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "sync_session_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncSessionSchema"
                }
              }
            },
            "description": "Returns an existing sync session"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncSessionSchema"
                }
              }
            },
            "description": "Returns a newly created sync session"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular sync session by id. If a session with such id doesn't exist,"
      },
      "patch": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "sync_session_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Update only if the field is not set (set to None) in the database",
            "in": "query",
            "name": "update_if_none",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncSessionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncSessionSchema"
                }
              }
            },
            "description": "Returns an updated sync session"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncSessionSchema"
                }
              }
            },
            "description": "Returns a newly created sync session"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Edit a sync session. If the session doesn't exist, a new one is created"
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "sync_session_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Update only if the field is not set (set to None) in the database",
            "in": "query",
            "name": "update_if_none",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncSessionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncSessionSchema"
                }
              }
            },
            "description": "Returns an updated sync session"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncSessionSchema"
                }
              }
            },
            "description": "Returns a newly created sync session"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Edit a sync session. If the session doesn't exist, a new one is created"
      }
    },
    "/v1/{object_type}/{object_id}/approvals/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Deletes an objects approval status"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_approval_request\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalsBySchema"
                }
              }
            },
            "description": "Returns an objects approval"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns an objects approval request"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_approval_status\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovalBySchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalBySchema"
                }
              }
            },
            "description": "Returns an objects approval"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Adds the approval by user and returns an objects approval status"
      }
    },
    "/v1/{object_type}/{object_id}/approvals/external/{email}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_approval_status\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Deletes an objects approval status by user_id"
      }
    },
    "/v1/{object_type}/{object_id}/approvals/request/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_approval_request\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalSchema"
                }
              }
            },
            "description": "Returns a objects approval"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Deletes an objects approval request"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_approval_request\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalSchema"
                }
              }
            },
            "description": "Returns a objects approval"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns an objects approval request"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_approval_request\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovalSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalSchema"
                }
              }
            },
            "description": "Returns a assets approval"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Edits an approval request"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_approval_request\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovalSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalSchema"
                }
              }
            },
            "description": "Returns a created approval"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalJobSchema"
                }
              }
            },
            "description": "Returns a job_id of the background approval request"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Creates an objects approval request"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_approval_request\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovalSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalSchema"
                }
              }
            },
            "description": "Returns a assets approval"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Edits an approval request"
      }
    },
    "/v1/{object_type}/{object_id}/approvals/user/{user_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_approval_status\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Deletes an objects approval status by user_id"
      }
    },
    "/v1/{object_type}/{object_id}/shares/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharesSchema"
                }
              }
            },
            "description": "Returns a list of share"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of object shares"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareCreateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareSchema"
                }
              }
            },
            "description": "Returns a created share; the URL field will be null as a notification email has been sent to the specified email addresses with the share URLs embedded in it\n"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Shares are restricted by system administator"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new share."
      }
    },
    "/v1/{object_type}/{object_id}/shares/url/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareURLCreateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareURLSchema"
                }
              }
            },
            "description": "Returns a URL link in the body of the response that can be shared and used to access the object\n"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Shares are restricted by system administator"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Generates a URL for the shared object"
      }
    },
    "/v1/{object_type}/{object_id}/shares/{share_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_object_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular share by id"
      },
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetShareSchema"
                }
              }
            },
            "description": "Returns a share"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular share by id"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareSchema"
                }
              }
            },
            "description": "Returns an updated share"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update share"
      }
    },
    "/v1/{object_type}/{object_id}/shares/{share_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexShareSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex the share"
      }
    },
    "/v1/{object_type}/{object_id}/shares/{share_id}/users/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareUsersSchema"
                }
              }
            },
            "description": "Returns a list of share"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of share users"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareUserSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareUserSchema"
                }
              }
            },
            "description": "Returns a created share user"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add a new share_user to a share"
      }
    },
    "/v1/{object_type}/{object_id}/shares/{share_id}/users/{share_user_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "No body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular share_user user by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareUserSchema"
                }
              }
            },
            "description": "Returns a share"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular share user by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareUserSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareUserSchema"
                }
              }
            },
            "description": "Returns an updated share"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update share user"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareUserSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareUserSchema"
                }
              }
            },
            "description": "Returns an updated share"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update share user"
      }
    },
    "/v1/{object_type}/{object_id}/versions/{version_id}/approvals/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_approval_request\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalsBySchema"
                }
              }
            },
            "description": "Returns a objects approval"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns an objects approval request by version"
      }
    },
    "/v1/{object_type}/{object_id}/versions/{version_id}/approvals/request/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_approval_request\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalSchema"
                }
              }
            },
            "description": "Returns a objects approval"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns an objects approval request by version"
      }
    }
  },
  "servers": [
    {
      "url": "/API/assets/"
    }
  ]
}